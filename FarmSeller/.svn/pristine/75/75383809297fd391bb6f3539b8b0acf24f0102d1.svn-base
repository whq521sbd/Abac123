package com.aotuo.vegetable.main.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.TextView;

import com.aotuo.vegetable.R;
import com.aotuo.vegetable.act.MainActivity;
import com.aotuo.vegetable.adapter.ContactListAdapter;
import com.aotuo.vegetable.base.BaseFragment;
import com.aotuo.vegetable.dialog.DefaultDialog;
import com.aotuo.vegetable.entity.ContactEntity;
import com.aotuo.vegetable.hx.ChatActivity;
import com.aotuo.vegetable.util.CommonTools;
import com.aotuo.vegetable.util.MyToast;
import com.aotuo.vegetable.util.StaticDialog;
import com.aotuo.vegetable.view.XListView;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;


public class ChatFragment extends BaseFragment implements View.OnClickListener, XListView.IXListViewListener{
    private LayoutInflater inflater;
    private Bundle savedInstanceState;
    private ViewGroup container;
    private View view;

    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        this.inflater = inflater;
        this.container = container;
        this.savedInstanceState = savedInstanceState;
        if (view == null) {
            view = inflater.inflate(R.layout.fragment_contact_list, null);

            initUI(view);
        }
        ViewGroup parent = (ViewGroup) view.getParent();
            if (parent != null) {
            parent.removeView(view);
        }
        return view;
    }
    //private TitleView titleView;
    private EditText search;
    private TextView toSearch;
    private XListView listView;
    private List<ContactEntity> contactEntityList = new ArrayList<ContactEntity>();
    private ContactListAdapter adapter;
    private DefaultDialog deleteDialog;

    private void initUI(View v) {
        //titleView = new TitleView();
        //titleView.initView(getActivity(), "通讯录");
        search = (EditText) v.findViewById(R.id.search);
        toSearch = (TextView) v.findViewById(R.id.toSearch);
        listView = (XListView) v.findViewById(R.id.listView);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                int pos = position - 1;
                if(pos < contactEntityList.size() && pos >= 0){
                    Intent intent = new Intent(getActivity(), ChatActivity.class);
                    intent.putExtra("RecID", contactEntityList.get(pos).getRecID());
                    intent.putExtra("RecName", contactEntityList.get(pos).getRecName());
                    startActivity(intent);
                }
            }
        });
        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                int pos = position - 1;
                if(pos < contactEntityList.size() && pos >= 0){
                    toDelete(contactEntityList.get(pos).getRecID());
                    return true;
                }
                return false;
            }
        });
        deleteDialog = new DefaultDialog(getActivity(), R.style.MyDialogStyle,
                new DefaultDialog.DialogListener() {

                    @Override
                    public void onclick(View v) {
                        switch (v.getId()) {
                            case R.id.cannel_clear:
                                deleteDialog.dismiss();
                                break;
                            case R.id.sure_clear:
                                HashMap<String, String> param = new HashMap<String, String>();
                                param.put("UserNum", deleteDialog.getStrParem());
                                param.put("Token", CommonTools.getToken(getActivity()));
                                MainActivity.getRequest(3, sHandler, "/UserA/TalkUserDel", param);

                                deleteDialog.dismiss();
                                break;
                            default:
                                break;
                        }
                    }
                });
        deleteDialog.setTitle("是否删除？");
        toSearch.setOnClickListener(this);

        hasNewsList();
        adapter = new ContactListAdapter(getActivity(), contactEntityList);
        listView.setAdapter(adapter);
        listView.setPullLoadEnable(true);
        listView.setXListViewListener(this);
        getUserList();
    }

    private void toDelete(String UserNum) {
        StaticDialog sd = new StaticDialog();
        deleteDialog.setStrParem(UserNum);
        deleteDialog.setStrContent("是否删除？");
        sd.init_dialog(deleteDialog);
    }

    /**
     * 获取当前联系人列表
     */
    private void getUserList(){
        HashMap<String,Object> param = new HashMap<String, Object>();
        param.put("Token", CommonTools.getToken(getActivity()));
        MainActivity.postRequest(2, sHandler, "/UserA/TalkUser", param);
    }
    /**
     * 获取当前是否有新信息
     */
    private void hasNewsList(){
        HashMap<String,Object> param = new HashMap<String, Object>();
        param.put("Token", CommonTools.getToken(getActivity()));
        MainActivity.postRequest(1, sHandler, "/UserA/IsNewTalk", param);
    }
    private Handler sHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            listView.stopRefresh();
            switch (msg.what){
                case 1:{
                    boolean isHas = false;
                    try {
                        isHas = new Gson().fromJson(msg.obj.toString(), Boolean.class);
                    } catch (JsonSyntaxException e) {
                        e.printStackTrace();
                    }
                    if(isHas){

                    }
                }
                break;
                case 2:{//new List<TalkUserA>() { new CustomerStat() { RecID = "123", RecName="ssssss" } }
                    List<ContactEntity> cel = null;
                    try {
                        cel = new Gson().fromJson(msg.obj.toString(),
                                new TypeToken<List<ContactEntity>>(){}.getType());
                    } catch (JsonSyntaxException e) {
                        e.printStackTrace();
                    }
                    contactEntityList.clear();
                    if(cel != null){
                        contactEntityList.addAll(cel);
                    }
                    adapter.notifyDataSetChanged();
                }
                break;
                case 3:{
                    if(msg.arg1 > 0){
                        MyToast.showToast(getActivity(), "删除成功！", 2);
                        getUserList();
                    }
                }
                break;
            }
        }
    };
    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.toSearch:{
                Intent intent = new Intent(getActivity(), ChatActivity.class);
//                intent.putExtra("RecID", "370101000002");
                //               intent.putExtra("RecName", "buy");
//                intent.putExtra("RecID", "370101000001");
//                intent.putExtra("RecName", "sell");
//                startActivity(intent);
            }
            break;
        }
    }

    @Override
    public void onRefresh() {
        listView.stopRefresh();
    }

    @Override
    public void onLoadMore() {
        listView.stopRefresh();
    }

    @Override
    public void handleCallBack(Message msg) {

    }
}
