package com.aotuo.vegetable.act;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.aotuo.vegetable.R;
import com.aotuo.vegetable.adapter.RecordAdapter;
import com.aotuo.vegetable.adapter.SelDateListAdapter;
import com.aotuo.vegetable.base.BaseActivity;
import com.aotuo.vegetable.entity.CustomEntity;
import com.aotuo.vegetable.entity.KeyValueData;
import com.aotuo.vegetable.entity.RecordEntity;
import com.aotuo.vegetable.util.CommonTools;
import com.aotuo.vegetable.view.TitleView;
import com.aotuo.vegetable.view.XListView;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class MyRecord extends BaseActivity implements OnClickListener, XListView.IXListViewListener {
	private TitleView titleView = new TitleView();
	private RelativeLayout select, searchBar;
	private TextView selDate, toSearch;
	private EditText editSearch;
	private XListView listView;
	private List<RecordEntity> reList = new ArrayList<RecordEntity>();
	private RecordAdapter adapter;
	private String type;
	private int period = 0;
	private List<KeyValueData> strList = new ArrayList<KeyValueData>();
	private CustomEntity customEntity;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.act_myrecord);
		type = getIntent().getStringExtra("type");
		searchBar = (RelativeLayout) findViewById(R.id.searchBar);
		selDate = (TextView) findViewById(R.id.selDate);
		if("current".equals(type)){
			selDate("今天");
			searchBar.setVisibility(View.GONE);
		} else if("custom".equals(type)){
			searchBar.setVisibility(View.GONE);
			customEntity = (CustomEntity) getIntent().getSerializableExtra("customData");
		}
		strList.add(new KeyValueData("今天", "a"));
		strList.add(new KeyValueData("七天", "b"));
		strList.add(new KeyValueData("一个月", "c"));
		strList.add(new KeyValueData("一年", "d"));
		initUI();
		getData();
	}

	/**
	 * 参数：Token,ViewType(a,b,c,d) a,b,c,d 当天,七天,一月,当年
	 * 获取订单信息列表
	 */
	private void getData() {
		if("current".equals(type)){
			HashMap<String, Object> param = new HashMap<String, Object>();
			param.put("Token", CommonTools.getToken(this));
			param.put("ViewType", strList.get(period).getValue());
			MainActivity.postRequest(1, sHandler, "/GoodsA/QueryTransByTime", param);
		} else if("custom".equals(type)){
			//参数：Token,ViewType(1,调用做为卖家;2,调用者做为买家),CustomerNum(对方帐户编号)
			HashMap<String, Object> param = new HashMap<String, Object>();
			param.put("Token", CommonTools.getToken(this));
			param.put("ViewType", "1");
			param.put("CustomerNum", customEntity.getID());
			MainActivity.postRequest(1, sHandler, "/UserA/CustomerTrans", param);
		}
	}
	private Handler sHandler = new Handler(){
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			if(msg.what == 1){
				if(msg.arg1 > 0){
					List<RecordEntity> tlist = null;
					try {
						tlist = new Gson().fromJson(msg.obj.toString(), new TypeToken<List<RecordEntity>>(){}.getType());
					} catch (JsonSyntaxException e) {
						e.printStackTrace();
					}
					if(tlist != null){
						reList.clear();
						reList.addAll(tlist);
						adapter.notifyDataSetChanged();
					}
				}
			}
		}
	};

	private void initUI() {
		// TODO Auto-generated method stub
		if("current".equals(type)){
			titleView.initView(this, "我的交易记录");
		} else if("custom".equals(type)){
			titleView.initView(this, customEntity.getFullName());
		}
		select = (RelativeLayout) findViewById(R.id.select);
		select.setOnClickListener(this);
		listView = (XListView) findViewById(R.id.listView);

		adapter = new RecordAdapter(this, reList);
		listView.setAdapter(adapter);
		listView.setPullLoadEnable(true);
		listView.setXListViewListener(this);

		toSearch = (TextView) findViewById(R.id.toSearch);
		editSearch = (EditText) findViewById(R.id.editSearch);

		toSearch.setOnClickListener(this);
	}

	private void selDate(String date){
		selDate.setText(date);
	}
	
	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
		switch (arg0.getId()) {
		case R.id.select: {
			showPopupWindow(select);
		}
			break;
		case R.id.toSearch: {
			CommonTools.hideSoftkey(MyRecord.this, editSearch);
		}
		break;
		}
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		CommonTools.hideSoftkey(MyRecord.this, editSearch);
	}
	
	private PopupWindow mPopupWin;
	private SelDateListAdapter popAdapter;

	private void showPopupWindow(View parent) {
		LayoutInflater layoutInflater = (LayoutInflater) this
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		final LinearLayout layout = (LinearLayout) layoutInflater.inflate(
				R.layout.classic_popup, null);

		mPopupWin = new PopupWindow(layout, LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);

		ListView popList = (ListView) layout.findViewById(R.id.popList);
		popAdapter = new SelDateListAdapter(MyRecord.this, strList);
		popList.setAdapter(popAdapter);
		popList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				period = arg2;
				selDate(((KeyValueData) popAdapter.getItem(arg2)).getKey());
				getData();
				mPopupWin.dismiss();
			}
		});

		layout.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				int height = layout.findViewById(R.id.popList).getTop();
				int y = (int) mPopupWin.getHeight();
				if (event.getAction() == MotionEvent.ACTION_UP) {
					if (y < height) {
						mPopupWin.dismiss();
					}
				}
				return true;
			}
		});

		mPopupWin.setFocusable(true);
		mPopupWin.setOutsideTouchable(false);

		// backgroundAlpha(0.5f);
		mPopupWin.setOnDismissListener(new OnDismissListener() {

			@Override
			public void onDismiss() {
				// backgroundAlpha(1f);

			}
		});
		WindowManager manager = (WindowManager) this
				.getSystemService(Context.WINDOW_SERVICE);
		int xpos = manager.getDefaultDisplay().getWidth()
				- mPopupWin.getWidth() - 20;

		mPopupWin.showAsDropDown(parent, 0, 18);
	}

	@Override
	public void onRefresh() {
		listView.stopRefresh();
	}

	@Override
	public void onLoadMore() {
		listView.stopRefresh();
	}
}
