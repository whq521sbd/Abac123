com.aotcap.zxing.test.CaptureActivity -> com.aotcap.zxing.test.CaptureActivity:
    com.aotcap.zxing.test.decoding.CaptureActivityHandler handler -> a
    com.aotcap.zxing.test.view.ViewfinderView viewfinderView -> b
    boolean hasSurface -> c
    java.util.Vector decodeFormats -> d
    java.lang.String characterSet -> e
    com.aotcap.zxing.test.decoding.InactivityTimer inactivityTimer -> f
    android.media.MediaPlayer mediaPlayer -> g
    boolean playBeep -> h
    boolean vibrate -> i
    android.media.MediaPlayer$OnCompletionListener beepListener -> j
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void initCamera(android.view.SurfaceHolder) -> a
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void setDisplayOrientation(android.hardware.Camera,int) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    com.aotcap.zxing.test.view.ViewfinderView getViewfinderView() -> a
    android.os.Handler getHandler() -> b
    void drawViewfinder() -> c
    void handleDecode(com.google.zxing.Result,android.graphics.Bitmap) -> a
    void initBeepSound() -> d
    void playBeepSoundAndVibrate() -> e
com.aotcap.zxing.test.CaptureActivity$1 -> com.aotcap.zxing.test.CaptureActivity$1:
    com.aotcap.zxing.test.CaptureActivity this$0 -> a
    void <init>(com.aotcap.zxing.test.CaptureActivity) -> <init>
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.aotcap.zxing.test.CreateQRImageTest -> com.aotcap.zxing.test.CreateQRImageTest:
    int QR_WIDTH -> a
    int QR_HEIGHT -> b
    void <init>() -> <init>
com.aotcap.zxing.test.R -> com.aotcap.zxing.test.R:
    void <init>() -> <init>
com.aotcap.zxing.test.R$attr -> com.aotcap.zxing.test.R$attr:
    void <init>() -> <init>
com.aotcap.zxing.test.R$color -> com.aotcap.zxing.test.R$color:
    int contents_text -> contents_text
    int encode_view -> encode_view
    int help_button_view -> help_button_view
    int help_view -> help_view
    int possible_result_points -> possible_result_points
    int result_image_border -> result_image_border
    int result_minor_text -> result_minor_text
    int result_points -> result_points
    int result_text -> result_text
    int result_view -> result_view
    int sbc_header_text -> sbc_header_text
    int sbc_header_view -> sbc_header_view
    int sbc_layout_view -> sbc_layout_view
    int sbc_list_item -> sbc_list_item
    int sbc_page_number_text -> sbc_page_number_text
    int sbc_snippet_text -> sbc_snippet_text
    int share_text -> share_text
    int share_view -> share_view
    int status_text -> status_text
    int status_view -> status_view
    int transparent -> transparent
    int viewfinder_frame -> viewfinder_frame
    int viewfinder_laser -> viewfinder_laser
    int viewfinder_mask -> viewfinder_mask
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.R$drawable -> com.aotcap.zxing.test.R$drawable:
    int icon -> icon
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.R$id -> com.aotcap.zxing.test.R$id:
    int auto_focus -> auto_focus
    int decode -> decode
    int decode_failed -> decode_failed
    int decode_succeeded -> decode_succeeded
    int encode_failed -> encode_failed
    int encode_succeeded -> encode_succeeded
    int launch_product_query -> launch_product_query
    int preview_view -> preview_view
    int quit -> quit
    int restart_preview -> restart_preview
    int return_scan_result -> return_scan_result
    int search_book_contents_failed -> search_book_contents_failed
    int search_book_contents_succeeded -> search_book_contents_succeeded
    int test_iv -> test_iv
    int txtResult -> txtResult
    int viewfinder_view -> viewfinder_view
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.R$layout -> com.aotcap.zxing.test.R$layout:
    int main -> main
    int test -> test
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.R$raw -> com.aotcap.zxing.test.R$raw:
    int beep -> beep
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.R$string -> com.aotcap.zxing.test.R$string:
    int app_name -> app_name
    int hello -> hello
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.camera.AutoFocusCallback -> com.aotcap.zxing.test.a.a:
    java.lang.String TAG -> a
    android.os.Handler autoFocusHandler -> b
    int autoFocusMessage -> c
    void <init>() -> <init>
    void setHandler(android.os.Handler,int) -> a
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.camera.CameraConfigurationManager -> com.aotcap.zxing.test.a.b:
    java.lang.String TAG -> a
    java.util.regex.Pattern COMMA_PATTERN -> b
    android.content.Context context -> c
    android.graphics.Point screenResolution -> d
    android.graphics.Point cameraResolution -> e
    int previewFormat -> f
    java.lang.String previewFormatString -> g
    void <init>(android.content.Context) -> <init>
    void initFromCameraParameters(android.hardware.Camera) -> a
    void setDesiredCameraParameters(android.hardware.Camera) -> b
    android.graphics.Point getCameraResolution() -> a
    android.graphics.Point getScreenResolution() -> b
    int getPreviewFormat() -> c
    java.lang.String getPreviewFormatString() -> d
    android.graphics.Point getCameraResolution(android.hardware.Camera$Parameters,android.graphics.Point) -> a
    android.graphics.Point findBestPreviewSizeValue(java.lang.CharSequence,android.graphics.Point) -> a
    int findBestMotZoomValue(java.lang.CharSequence,int) -> a
    void setFlash(android.hardware.Camera$Parameters) -> a
    void setZoom(android.hardware.Camera$Parameters) -> b
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.camera.CameraManager -> com.aotcap.zxing.test.a.c:
    java.lang.String TAG -> b
    com.aotcap.zxing.test.camera.CameraManager cameraManager -> c
    int SDK_INT -> a
    android.content.Context context -> d
    com.aotcap.zxing.test.camera.CameraConfigurationManager configManager -> e
    android.hardware.Camera camera -> f
    android.graphics.Rect framingRect -> g
    android.graphics.Rect framingRectInPreview -> h
    boolean initialized -> i
    boolean previewing -> j
    boolean useOneShotPreviewCallback -> k
    com.aotcap.zxing.test.camera.PreviewCallback previewCallback -> l
    com.aotcap.zxing.test.camera.AutoFocusCallback autoFocusCallback -> m
    void init(android.content.Context) -> a
    com.aotcap.zxing.test.camera.CameraManager get() -> a
    android.hardware.Camera getCamera() -> b
    void <init>(android.content.Context) -> <init>
    void openDriver(android.view.SurfaceHolder) -> a
    void closeDriver() -> c
    void startPreview() -> d
    void stopPreview() -> e
    void requestPreviewFrame(android.os.Handler,int) -> a
    void requestAutoFocus(android.os.Handler,int) -> b
    android.graphics.Rect getFramingRect() -> f
    android.graphics.Rect getFramingRectInPreview() -> g
    com.aotcap.zxing.test.camera.PlanarYUVLuminanceSource buildLuminanceSource(byte[],int,int) -> a
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.camera.FlashlightManager -> com.aotcap.zxing.test.a.d:
    java.lang.String TAG -> a
    java.lang.Object iHardwareService -> b
    java.lang.reflect.Method setFlashEnabledMethod -> c
    void <init>() -> <init>
    java.lang.Object getHardwareService() -> c
    java.lang.reflect.Method getSetFlashEnabledMethod(java.lang.Object) -> a
    java.lang.Class maybeForName(java.lang.String) -> a
    java.lang.reflect.Method maybeGetMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> a
    java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    void enableFlashlight() -> a
    void disableFlashlight() -> b
    void setFlashlight(boolean) -> a
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.camera.PlanarYUVLuminanceSource -> com.aotcap.zxing.test.a.e:
    byte[] yuvData -> a
    int dataWidth -> b
    int dataHeight -> c
    int left -> d
    int top -> e
    void <init>(byte[],int,int,int,int,int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    android.graphics.Bitmap renderCroppedGreyscaleBitmap() -> a
com.aotcap.zxing.test.camera.PreviewCallback -> com.aotcap.zxing.test.a.f:
    java.lang.String TAG -> a
    com.aotcap.zxing.test.camera.CameraConfigurationManager configManager -> b
    boolean useOneShotPreviewCallback -> c
    android.os.Handler previewHandler -> d
    int previewMessage -> e
    void <init>(com.aotcap.zxing.test.camera.CameraConfigurationManager,boolean) -> <init>
    void setHandler(android.os.Handler,int) -> a
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.decoding.CaptureActivityHandler -> com.aotcap.zxing.test.b.a:
    java.lang.String TAG -> a
    com.aotcap.zxing.test.CaptureActivity activity -> b
    com.aotcap.zxing.test.decoding.DecodeThread decodeThread -> c
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State state -> d
    void <init>(com.aotcap.zxing.test.CaptureActivity,java.util.Vector,java.lang.String) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void quitSynchronously() -> a
    void restartPreviewAndDecode() -> b
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.decoding.CaptureActivityHandler$State -> com.aotcap.zxing.test.b.a$a:
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State PREVIEW -> a
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State SUCCESS -> b
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State DONE -> c
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State[] $VALUES -> d
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State[] values() -> values
    com.aotcap.zxing.test.decoding.CaptureActivityHandler$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.decoding.DecodeFormatManager -> com.aotcap.zxing.test.b.b:
    java.util.regex.Pattern COMMA_PATTERN -> e
    java.util.Vector PRODUCT_FORMATS -> a
    java.util.Vector ONE_D_FORMATS -> b
    java.util.Vector QR_CODE_FORMATS -> c
    java.util.Vector DATA_MATRIX_FORMATS -> d
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.decoding.DecodeHandler -> com.aotcap.zxing.test.b.c:
    java.lang.String TAG -> a
    com.aotcap.zxing.test.CaptureActivity activity -> b
    com.google.zxing.MultiFormatReader multiFormatReader -> c
    void <init>(com.aotcap.zxing.test.CaptureActivity,java.util.Hashtable) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void decode(byte[],int,int) -> a
    void <clinit>() -> <clinit>
com.aotcap.zxing.test.decoding.DecodeThread -> com.aotcap.zxing.test.b.d:
    com.aotcap.zxing.test.CaptureActivity activity -> a
    java.util.Hashtable hints -> b
    android.os.Handler handler -> c
    java.util.concurrent.CountDownLatch handlerInitLatch -> d
    void <init>(com.aotcap.zxing.test.CaptureActivity,java.util.Vector,java.lang.String,com.google.zxing.ResultPointCallback) -> <init>
    android.os.Handler getHandler() -> a
    void run() -> run
com.aotcap.zxing.test.decoding.FinishListener -> com.aotcap.zxing.test.b.e:
    android.app.Activity activityToFinish -> a
    void <init>(android.app.Activity) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
    void onClick(android.content.DialogInterface,int) -> onClick
    void run() -> run
com.aotcap.zxing.test.decoding.InactivityTimer -> com.aotcap.zxing.test.b.f:
    java.util.concurrent.ScheduledExecutorService inactivityTimer -> a
    android.app.Activity activity -> b
    java.util.concurrent.ScheduledFuture inactivityFuture -> c
    void <init>(android.app.Activity) -> <init>
    void onActivity() -> a
    void cancel() -> c
    void shutdown() -> b
com.aotcap.zxing.test.decoding.InactivityTimer$1 -> com.aotcap.zxing.test.b.f$1:
com.aotcap.zxing.test.decoding.InactivityTimer$DaemonThreadFactory -> com.aotcap.zxing.test.b.f$a:
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    void <init>(com.aotcap.zxing.test.decoding.InactivityTimer$1) -> <init>
com.aotcap.zxing.test.view.ViewfinderResultPointCallback -> com.aotcap.zxing.test.view.a:
    com.aotcap.zxing.test.view.ViewfinderView viewfinderView -> a
    void <init>(com.aotcap.zxing.test.view.ViewfinderView) -> <init>
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> foundPossibleResultPoint
com.aotcap.zxing.test.view.ViewfinderView -> com.aotcap.zxing.test.view.ViewfinderView:
    int[] SCANNER_ALPHA -> a
    android.graphics.Paint paint -> b
    android.graphics.Bitmap resultBitmap -> c
    int maskColor -> d
    int resultColor -> e
    int frameColor -> f
    int laserColor -> g
    int resultPointColor -> h
    int scannerAlpha -> i
    java.util.Collection possibleResultPoints -> j
    java.util.Collection lastPossibleResultPoints -> k
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawViewfinder() -> a
    void addPossibleResultPoint(com.google.zxing.ResultPoint) -> a
    void <clinit>() -> <clinit>
com.google.zxing.BarcodeFormat -> com.google.zxing.BarcodeFormat:
    com.google.zxing.BarcodeFormat AZTEC -> AZTEC
    com.google.zxing.BarcodeFormat CODABAR -> CODABAR
    com.google.zxing.BarcodeFormat CODE_39 -> CODE_39
    com.google.zxing.BarcodeFormat CODE_93 -> CODE_93
    com.google.zxing.BarcodeFormat CODE_128 -> CODE_128
    com.google.zxing.BarcodeFormat DATA_MATRIX -> DATA_MATRIX
    com.google.zxing.BarcodeFormat EAN_8 -> EAN_8
    com.google.zxing.BarcodeFormat EAN_13 -> EAN_13
    com.google.zxing.BarcodeFormat ITF -> ITF
    com.google.zxing.BarcodeFormat MAXICODE -> MAXICODE
    com.google.zxing.BarcodeFormat PDF_417 -> PDF_417
    com.google.zxing.BarcodeFormat QR_CODE -> QR_CODE
    com.google.zxing.BarcodeFormat RSS_14 -> RSS_14
    com.google.zxing.BarcodeFormat RSS_EXPANDED -> RSS_EXPANDED
    com.google.zxing.BarcodeFormat UPC_A -> UPC_A
    com.google.zxing.BarcodeFormat UPC_E -> UPC_E
    com.google.zxing.BarcodeFormat UPC_EAN_EXTENSION -> UPC_EAN_EXTENSION
    com.google.zxing.BarcodeFormat[] $VALUES -> $VALUES
    com.google.zxing.BarcodeFormat[] values() -> values
    com.google.zxing.BarcodeFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.Binarizer -> com.google.zxing.Binarizer:
    com.google.zxing.LuminanceSource source -> source
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.LuminanceSource getLuminanceSource() -> getLuminanceSource
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    int getWidth() -> getWidth
    int getHeight() -> getHeight
com.google.zxing.BinaryBitmap -> com.google.zxing.BinaryBitmap:
    com.google.zxing.Binarizer binarizer -> binarizer
    com.google.zxing.common.BitMatrix matrix -> matrix
    void <init>(com.google.zxing.Binarizer) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.BinaryBitmap crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.BinaryBitmap rotateCounterClockwise() -> rotateCounterClockwise
com.google.zxing.ChecksumException -> com.google.zxing.ChecksumException:
    com.google.zxing.ChecksumException instance -> instance
    void <init>() -> <init>
    com.google.zxing.ChecksumException getChecksumInstance() -> getChecksumInstance
    void <clinit>() -> <clinit>
com.google.zxing.DecodeHintType -> com.google.zxing.DecodeHintType:
    com.google.zxing.DecodeHintType OTHER -> OTHER
    com.google.zxing.DecodeHintType PURE_BARCODE -> PURE_BARCODE
    com.google.zxing.DecodeHintType POSSIBLE_FORMATS -> POSSIBLE_FORMATS
    com.google.zxing.DecodeHintType TRY_HARDER -> TRY_HARDER
    com.google.zxing.DecodeHintType CHARACTER_SET -> CHARACTER_SET
    com.google.zxing.DecodeHintType ALLOWED_LENGTHS -> ALLOWED_LENGTHS
    com.google.zxing.DecodeHintType ASSUME_CODE_39_CHECK_DIGIT -> ASSUME_CODE_39_CHECK_DIGIT
    com.google.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK -> NEED_RESULT_POINT_CALLBACK
    com.google.zxing.DecodeHintType[] $VALUES -> $VALUES
    com.google.zxing.DecodeHintType[] values() -> values
    com.google.zxing.DecodeHintType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.EncodeHintType -> com.google.zxing.EncodeHintType:
    com.google.zxing.EncodeHintType ERROR_CORRECTION -> ERROR_CORRECTION
    com.google.zxing.EncodeHintType CHARACTER_SET -> CHARACTER_SET
    com.google.zxing.EncodeHintType[] $VALUES -> $VALUES
    com.google.zxing.EncodeHintType[] values() -> values
    com.google.zxing.EncodeHintType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.FormatException -> com.google.zxing.FormatException:
    com.google.zxing.FormatException instance -> instance
    void <init>() -> <init>
    com.google.zxing.FormatException getFormatInstance() -> getFormatInstance
    void <clinit>() -> <clinit>
com.google.zxing.LuminanceSource -> com.google.zxing.LuminanceSource:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    java.lang.String toString() -> toString
com.google.zxing.MultiFormatReader -> com.google.zxing.MultiFormatReader:
    java.util.Map hints -> hints
    com.google.zxing.Reader[] readers -> readers
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    com.google.zxing.Result decodeWithState(com.google.zxing.BinaryBitmap) -> decodeWithState
    void setHints(java.util.Map) -> setHints
    void reset() -> reset
    com.google.zxing.Result decodeInternal(com.google.zxing.BinaryBitmap) -> decodeInternal
com.google.zxing.MultiFormatWriter -> com.google.zxing.MultiFormatWriter:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.MultiFormatWriter$1 -> com.google.zxing.MultiFormatWriter$1:
    int[] $SwitchMap$com$google$zxing$BarcodeFormat -> $SwitchMap$com$google$zxing$BarcodeFormat
    void <clinit>() -> <clinit>
com.google.zxing.NotFoundException -> com.google.zxing.NotFoundException:
    com.google.zxing.NotFoundException instance -> instance
    void <init>() -> <init>
    com.google.zxing.NotFoundException getNotFoundInstance() -> getNotFoundInstance
    void <clinit>() -> <clinit>
com.google.zxing.Reader -> com.google.zxing.Reader:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
com.google.zxing.ReaderException -> com.google.zxing.ReaderException:
    void <init>() -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.google.zxing.Result -> com.google.zxing.Result:
    java.lang.String text -> text
    byte[] rawBytes -> rawBytes
    com.google.zxing.ResultPoint[] resultPoints -> resultPoints
    com.google.zxing.BarcodeFormat format -> format
    java.util.Map resultMetadata -> resultMetadata
    long timestamp -> timestamp
    void <init>(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat) -> <init>
    void <init>(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat,long) -> <init>
    java.lang.String getText() -> getText
    byte[] getRawBytes() -> getRawBytes
    com.google.zxing.ResultPoint[] getResultPoints() -> getResultPoints
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    java.util.Map getResultMetadata() -> getResultMetadata
    void putMetadata(com.google.zxing.ResultMetadataType,java.lang.Object) -> putMetadata
    void putAllMetadata(java.util.Map) -> putAllMetadata
    void addResultPoints(com.google.zxing.ResultPoint[]) -> addResultPoints
    long getTimestamp() -> getTimestamp
    java.lang.String toString() -> toString
com.google.zxing.ResultMetadataType -> com.google.zxing.ResultMetadataType:
    com.google.zxing.ResultMetadataType OTHER -> OTHER
    com.google.zxing.ResultMetadataType ORIENTATION -> ORIENTATION
    com.google.zxing.ResultMetadataType BYTE_SEGMENTS -> BYTE_SEGMENTS
    com.google.zxing.ResultMetadataType ERROR_CORRECTION_LEVEL -> ERROR_CORRECTION_LEVEL
    com.google.zxing.ResultMetadataType ISSUE_NUMBER -> ISSUE_NUMBER
    com.google.zxing.ResultMetadataType SUGGESTED_PRICE -> SUGGESTED_PRICE
    com.google.zxing.ResultMetadataType POSSIBLE_COUNTRY -> POSSIBLE_COUNTRY
    com.google.zxing.ResultMetadataType[] $VALUES -> $VALUES
    com.google.zxing.ResultMetadataType[] values() -> values
    com.google.zxing.ResultMetadataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.ResultPoint -> com.google.zxing.ResultPoint:
    float x -> x
    float y -> y
    void <init>(float,float) -> <init>
    float getX() -> getX
    float getY() -> getY
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void orderBestPatterns(com.google.zxing.ResultPoint[]) -> orderBestPatterns
    float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> distance
    float crossProductZ(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> crossProductZ
com.google.zxing.ResultPointCallback -> com.google.zxing.ResultPointCallback:
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> foundPossibleResultPoint
com.google.zxing.Writer -> com.google.zxing.Writer:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.WriterException -> com.google.zxing.WriterException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.zxing.aztec.AztecDetectorResult -> com.google.zxing.aztec.AztecDetectorResult:
    boolean compact -> compact
    int nbDatablocks -> nbDatablocks
    int nbLayers -> nbLayers
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[],boolean,int,int) -> <init>
    int getNbLayers() -> getNbLayers
    int getNbDatablocks() -> getNbDatablocks
    boolean isCompact() -> isCompact
com.google.zxing.aztec.AztecReader -> com.google.zxing.aztec.AztecReader:
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
com.google.zxing.aztec.decoder.Decoder -> com.google.zxing.aztec.decoder.Decoder:
    int[] NB_BITS_COMPACT -> NB_BITS_COMPACT
    int[] NB_BITS -> NB_BITS
    int[] NB_DATABLOCK_COMPACT -> NB_DATABLOCK_COMPACT
    int[] NB_DATABLOCK -> NB_DATABLOCK
    java.lang.String[] UPPER_TABLE -> UPPER_TABLE
    java.lang.String[] LOWER_TABLE -> LOWER_TABLE
    java.lang.String[] MIXED_TABLE -> MIXED_TABLE
    java.lang.String[] PUNCT_TABLE -> PUNCT_TABLE
    java.lang.String[] DIGIT_TABLE -> DIGIT_TABLE
    int numCodewords -> numCodewords
    int codewordSize -> codewordSize
    com.google.zxing.aztec.AztecDetectorResult ddata -> ddata
    int invertedBitCount -> invertedBitCount
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(com.google.zxing.aztec.AztecDetectorResult) -> decode
    java.lang.String getEncodedData(boolean[]) -> getEncodedData
    com.google.zxing.aztec.decoder.Decoder$Table getTable(char) -> getTable
    java.lang.String getCharacter(com.google.zxing.aztec.decoder.Decoder$Table,int) -> getCharacter
    boolean[] correctBits(boolean[]) -> correctBits
    boolean[] extractBits(com.google.zxing.common.BitMatrix) -> extractBits
    com.google.zxing.common.BitMatrix removeDashedLines(com.google.zxing.common.BitMatrix) -> removeDashedLines
    int readCode(boolean[],int,int) -> readCode
    void <clinit>() -> <clinit>
com.google.zxing.aztec.decoder.Decoder$1 -> com.google.zxing.aztec.decoder.Decoder$1:
    int[] $SwitchMap$com$google$zxing$aztec$decoder$Decoder$Table -> $SwitchMap$com$google$zxing$aztec$decoder$Decoder$Table
    void <clinit>() -> <clinit>
com.google.zxing.aztec.decoder.Decoder$Table -> com.google.zxing.aztec.decoder.Decoder$Table:
    com.google.zxing.aztec.decoder.Decoder$Table UPPER -> UPPER
    com.google.zxing.aztec.decoder.Decoder$Table LOWER -> LOWER
    com.google.zxing.aztec.decoder.Decoder$Table MIXED -> MIXED
    com.google.zxing.aztec.decoder.Decoder$Table DIGIT -> DIGIT
    com.google.zxing.aztec.decoder.Decoder$Table PUNCT -> PUNCT
    com.google.zxing.aztec.decoder.Decoder$Table BINARY -> BINARY
    com.google.zxing.aztec.decoder.Decoder$Table[] $VALUES -> $VALUES
    com.google.zxing.aztec.decoder.Decoder$Table[] values() -> values
    com.google.zxing.aztec.decoder.Decoder$Table valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.aztec.detector.Detector -> com.google.zxing.aztec.detector.Detector:
    com.google.zxing.common.BitMatrix image -> image
    boolean compact -> compact
    int nbLayers -> nbLayers
    int nbDataBlocks -> nbDataBlocks
    int nbCenterLayers -> nbCenterLayers
    int shift -> shift
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.aztec.AztecDetectorResult detect() -> detect
    void extractParameters(com.google.zxing.aztec.detector.Detector$Point[]) -> extractParameters
    com.google.zxing.ResultPoint[] getMatrixCornerPoints(com.google.zxing.aztec.detector.Detector$Point[]) -> getMatrixCornerPoints
    void correctParameterData(boolean[],boolean) -> correctParameterData
    com.google.zxing.aztec.detector.Detector$Point[] getBullEyeCornerPoints(com.google.zxing.aztec.detector.Detector$Point) -> getBullEyeCornerPoints
    com.google.zxing.aztec.detector.Detector$Point getMatrixCenter() -> getMatrixCenter
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> sampleGrid
    void getParameters(boolean[]) -> getParameters
    boolean[] sampleLine(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,int) -> sampleLine
    boolean isWhiteOrBlackRectangle(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> isWhiteOrBlackRectangle
    int getColor(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> getColor
    com.google.zxing.aztec.detector.Detector$Point getFirstDifferent(com.google.zxing.aztec.detector.Detector$Point,boolean,int,int) -> getFirstDifferent
    boolean isValid(int,int) -> isValid
    int round(float) -> round
    float distance(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> distance
com.google.zxing.aztec.detector.Detector$1 -> com.google.zxing.aztec.detector.Detector$1:
com.google.zxing.aztec.detector.Detector$Point -> com.google.zxing.aztec.detector.Detector$Point:
    int x -> x
    int y -> y
    com.google.zxing.ResultPoint toResultPoint() -> toResultPoint
    void <init>(int,int) -> <init>
    void <init>(int,int,com.google.zxing.aztec.detector.Detector$1) -> <init>
com.google.zxing.client.result.AbstractDoCoMoResultParser -> com.google.zxing.client.result.AbstractDoCoMoResultParser:
    void <init>() -> <init>
    java.lang.String[] matchDoCoMoPrefixedField(java.lang.String,java.lang.String,boolean) -> matchDoCoMoPrefixedField
    java.lang.String matchSingleDoCoMoPrefixedField(java.lang.String,java.lang.String,boolean) -> matchSingleDoCoMoPrefixedField
com.google.zxing.client.result.AddressBookAUResultParser -> com.google.zxing.client.result.AddressBookAUResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result) -> parse
    java.lang.String[] matchMultipleValuePrefix(java.lang.String,int,java.lang.String,boolean) -> matchMultipleValuePrefix
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.AddressBookDoCoMoResultParser -> com.google.zxing.client.result.AddressBookDoCoMoResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result) -> parse
    java.lang.String parseName(java.lang.String) -> parseName
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.AddressBookParsedResult -> com.google.zxing.client.result.AddressBookParsedResult:
    java.lang.String[] names -> names
    java.lang.String pronunciation -> pronunciation
    java.lang.String[] phoneNumbers -> phoneNumbers
    java.lang.String[] phoneTypes -> phoneTypes
    java.lang.String[] emails -> emails
    java.lang.String[] emailTypes -> emailTypes
    java.lang.String instantMessenger -> instantMessenger
    java.lang.String note -> note
    java.lang.String[] addresses -> addresses
    java.lang.String[] addressTypes -> addressTypes
    java.lang.String org -> org
    java.lang.String birthday -> birthday
    java.lang.String title -> title
    java.lang.String url -> url
    void <init>(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String[] getNames() -> getNames
    java.lang.String getPronunciation() -> getPronunciation
    java.lang.String[] getPhoneNumbers() -> getPhoneNumbers
    java.lang.String[] getPhoneTypes() -> getPhoneTypes
    java.lang.String[] getEmails() -> getEmails
    java.lang.String[] getEmailTypes() -> getEmailTypes
    java.lang.String getInstantMessenger() -> getInstantMessenger
    java.lang.String getNote() -> getNote
    java.lang.String[] getAddresses() -> getAddresses
    java.lang.String[] getAddressTypes() -> getAddressTypes
    java.lang.String getTitle() -> getTitle
    java.lang.String getOrg() -> getOrg
    java.lang.String getURL() -> getURL
    java.lang.String getBirthday() -> getBirthday
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.BizcardResultParser -> com.google.zxing.client.result.BizcardResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result) -> parse
    java.lang.String[] buildPhoneNumbers(java.lang.String,java.lang.String,java.lang.String) -> buildPhoneNumbers
    java.lang.String buildName(java.lang.String,java.lang.String) -> buildName
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.BookmarkDoCoMoResultParser -> com.google.zxing.client.result.BookmarkDoCoMoResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.CalendarParsedResult -> com.google.zxing.client.result.CalendarParsedResult:
    java.lang.String summary -> summary
    java.lang.String start -> start
    java.lang.String end -> end
    java.lang.String location -> location
    java.lang.String attendee -> attendee
    java.lang.String description -> description
    double latitude -> latitude
    double longitude -> longitude
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,double,double) -> <init>
    java.lang.String getSummary() -> getSummary
    java.lang.String getStart() -> getStart
    java.lang.String getEnd() -> getEnd
    java.lang.String getLocation() -> getLocation
    java.lang.String getAttendee() -> getAttendee
    java.lang.String getDescription() -> getDescription
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    java.lang.String getDisplayResult() -> getDisplayResult
    void validateDate(java.lang.CharSequence) -> validateDate
com.google.zxing.client.result.EmailAddressParsedResult -> com.google.zxing.client.result.EmailAddressParsedResult:
    java.lang.String emailAddress -> emailAddress
    java.lang.String subject -> subject
    java.lang.String body -> body
    java.lang.String mailtoURI -> mailtoURI
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getEmailAddress() -> getEmailAddress
    java.lang.String getSubject() -> getSubject
    java.lang.String getBody() -> getBody
    java.lang.String getMailtoURI() -> getMailtoURI
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.EmailAddressResultParser -> com.google.zxing.client.result.EmailAddressResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.EmailDoCoMoResultParser -> com.google.zxing.client.result.EmailDoCoMoResultParser:
    java.util.regex.Pattern ATEXT_ALPHANUMERIC -> ATEXT_ALPHANUMERIC
    void <init>() -> <init>
    com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result) -> parse
    boolean isBasicallyValidEmailAddress(java.lang.String) -> isBasicallyValidEmailAddress
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
    void <clinit>() -> <clinit>
com.google.zxing.client.result.ExpandedProductParsedResult -> com.google.zxing.client.result.ExpandedProductParsedResult:
    java.lang.String KILOGRAM -> KILOGRAM
    java.lang.String POUND -> POUND
    java.lang.String productID -> productID
    java.lang.String sscc -> sscc
    java.lang.String lotNumber -> lotNumber
    java.lang.String productionDate -> productionDate
    java.lang.String packagingDate -> packagingDate
    java.lang.String bestBeforeDate -> bestBeforeDate
    java.lang.String expirationDate -> expirationDate
    java.lang.String weight -> weight
    java.lang.String weightType -> weightType
    java.lang.String weightIncrement -> weightIncrement
    java.lang.String price -> price
    java.lang.String priceIncrement -> priceIncrement
    java.lang.String priceCurrency -> priceCurrency
    java.util.Map uncommonAIs -> uncommonAIs
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map) -> <init>
    boolean equals(java.lang.Object) -> equals
    boolean equalsOrNull(java.lang.Object,java.lang.Object) -> equalsOrNull
    int hashCode() -> hashCode
    int hashNotNull(java.lang.Object) -> hashNotNull
    java.lang.String getProductID() -> getProductID
    java.lang.String getSscc() -> getSscc
    java.lang.String getLotNumber() -> getLotNumber
    java.lang.String getProductionDate() -> getProductionDate
    java.lang.String getPackagingDate() -> getPackagingDate
    java.lang.String getBestBeforeDate() -> getBestBeforeDate
    java.lang.String getExpirationDate() -> getExpirationDate
    java.lang.String getWeight() -> getWeight
    java.lang.String getWeightType() -> getWeightType
    java.lang.String getWeightIncrement() -> getWeightIncrement
    java.lang.String getPrice() -> getPrice
    java.lang.String getPriceIncrement() -> getPriceIncrement
    java.lang.String getPriceCurrency() -> getPriceCurrency
    java.util.Map getUncommonAIs() -> getUncommonAIs
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.ExpandedProductResultParser -> com.google.zxing.client.result.ExpandedProductResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.ExpandedProductParsedResult parse(com.google.zxing.Result) -> parse
    java.lang.String findAIvalue(int,java.lang.String) -> findAIvalue
    java.lang.String findValue(int,java.lang.String) -> findValue
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.GeoParsedResult -> com.google.zxing.client.result.GeoParsedResult:
    double latitude -> latitude
    double longitude -> longitude
    double altitude -> altitude
    java.lang.String query -> query
    void <init>(double,double,double,java.lang.String) -> <init>
    java.lang.String getGeoURI() -> getGeoURI
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    double getAltitude() -> getAltitude
    java.lang.String getQuery() -> getQuery
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.GeoResultParser -> com.google.zxing.client.result.GeoResultParser:
    java.util.regex.Pattern GEO_URL_PATTERN -> GEO_URL_PATTERN
    void <init>() -> <init>
    com.google.zxing.client.result.GeoParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
    void <clinit>() -> <clinit>
com.google.zxing.client.result.ISBNParsedResult -> com.google.zxing.client.result.ISBNParsedResult:
    java.lang.String isbn -> isbn
    void <init>(java.lang.String) -> <init>
    java.lang.String getISBN() -> getISBN
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.ISBNResultParser -> com.google.zxing.client.result.ISBNResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.ISBNParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.ParsedResult -> com.google.zxing.client.result.ParsedResult:
    com.google.zxing.client.result.ParsedResultType type -> type
    void <init>(com.google.zxing.client.result.ParsedResultType) -> <init>
    com.google.zxing.client.result.ParsedResultType getType() -> getType
    java.lang.String getDisplayResult() -> getDisplayResult
    java.lang.String toString() -> toString
    void maybeAppend(java.lang.String,java.lang.StringBuilder) -> maybeAppend
    void maybeAppend(java.lang.String[],java.lang.StringBuilder) -> maybeAppend
com.google.zxing.client.result.ParsedResultType -> com.google.zxing.client.result.ParsedResultType:
    com.google.zxing.client.result.ParsedResultType ADDRESSBOOK -> ADDRESSBOOK
    com.google.zxing.client.result.ParsedResultType EMAIL_ADDRESS -> EMAIL_ADDRESS
    com.google.zxing.client.result.ParsedResultType PRODUCT -> PRODUCT
    com.google.zxing.client.result.ParsedResultType URI -> URI
    com.google.zxing.client.result.ParsedResultType TEXT -> TEXT
    com.google.zxing.client.result.ParsedResultType GEO -> GEO
    com.google.zxing.client.result.ParsedResultType TEL -> TEL
    com.google.zxing.client.result.ParsedResultType SMS -> SMS
    com.google.zxing.client.result.ParsedResultType CALENDAR -> CALENDAR
    com.google.zxing.client.result.ParsedResultType WIFI -> WIFI
    com.google.zxing.client.result.ParsedResultType ISBN -> ISBN
    com.google.zxing.client.result.ParsedResultType[] $VALUES -> $VALUES
    com.google.zxing.client.result.ParsedResultType[] values() -> values
    com.google.zxing.client.result.ParsedResultType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.client.result.ProductParsedResult -> com.google.zxing.client.result.ProductParsedResult:
    java.lang.String productID -> productID
    java.lang.String normalizedProductID -> normalizedProductID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getProductID() -> getProductID
    java.lang.String getNormalizedProductID() -> getNormalizedProductID
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.ProductResultParser -> com.google.zxing.client.result.ProductResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.ProductParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.ResultParser -> com.google.zxing.client.result.ResultParser:
    com.google.zxing.client.result.ResultParser[] PARSERS -> PARSERS
    java.util.regex.Pattern DIGITS -> DIGITS
    java.util.regex.Pattern ALPHANUM -> ALPHANUM
    java.util.regex.Pattern AMPERSAND -> AMPERSAND
    java.util.regex.Pattern EQUALS -> EQUALS
    void <init>() -> <init>
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parseResult(com.google.zxing.Result) -> parseResult
    void maybeAppend(java.lang.String,java.lang.StringBuilder) -> maybeAppend
    void maybeAppend(java.lang.String[],java.lang.StringBuilder) -> maybeAppend
    java.lang.String[] maybeWrap(java.lang.String) -> maybeWrap
    java.lang.String unescapeBackslash(java.lang.String) -> unescapeBackslash
    int parseHexDigit(char) -> parseHexDigit
    boolean isStringOfDigits(java.lang.CharSequence,int) -> isStringOfDigits
    boolean isSubstringOfDigits(java.lang.CharSequence,int,int) -> isSubstringOfDigits
    boolean isSubstringOfAlphaNumeric(java.lang.CharSequence,int,int) -> isSubstringOfAlphaNumeric
    java.util.Map parseNameValuePairs(java.lang.String) -> parseNameValuePairs
    void appendKeyValue(java.lang.CharSequence,java.util.Map) -> appendKeyValue
    java.lang.String[] matchPrefixedField(java.lang.String,java.lang.String,char,boolean) -> matchPrefixedField
    java.lang.String matchSinglePrefixedField(java.lang.String,java.lang.String,char,boolean) -> matchSinglePrefixedField
    void <clinit>() -> <clinit>
com.google.zxing.client.result.SMSMMSResultParser -> com.google.zxing.client.result.SMSMMSResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.SMSParsedResult parse(com.google.zxing.Result) -> parse
    void addNumberVia(java.util.Collection,java.util.Collection,java.lang.String) -> addNumberVia
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.SMSParsedResult -> com.google.zxing.client.result.SMSParsedResult:
    java.lang.String[] numbers -> numbers
    java.lang.String[] vias -> vias
    java.lang.String subject -> subject
    java.lang.String body -> body
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String[],java.lang.String[],java.lang.String,java.lang.String) -> <init>
    java.lang.String getSMSURI() -> getSMSURI
    java.lang.String[] getNumbers() -> getNumbers
    java.lang.String[] getVias() -> getVias
    java.lang.String getSubject() -> getSubject
    java.lang.String getBody() -> getBody
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.SMSTOMMSTOResultParser -> com.google.zxing.client.result.SMSTOMMSTOResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.SMSParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.SMTPResultParser -> com.google.zxing.client.result.SMTPResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.TelParsedResult -> com.google.zxing.client.result.TelParsedResult:
    java.lang.String number -> number
    java.lang.String telURI -> telURI
    java.lang.String title -> title
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getNumber() -> getNumber
    java.lang.String getTelURI() -> getTelURI
    java.lang.String getTitle() -> getTitle
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.TelResultParser -> com.google.zxing.client.result.TelResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.TelParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.TextParsedResult -> com.google.zxing.client.result.TextParsedResult:
    java.lang.String text -> text
    java.lang.String language -> language
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getText() -> getText
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.URIParsedResult -> com.google.zxing.client.result.URIParsedResult:
    java.util.regex.Pattern USER_IN_HOST -> USER_IN_HOST
    java.lang.String uri -> uri
    java.lang.String title -> title
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getURI() -> getURI
    java.lang.String getTitle() -> getTitle
    boolean isPossiblyMaliciousURI() -> isPossiblyMaliciousURI
    java.lang.String getDisplayResult() -> getDisplayResult
    java.lang.String massageURI(java.lang.String) -> massageURI
    boolean isColonFollowedByPortNumber(java.lang.String,int) -> isColonFollowedByPortNumber
    void <clinit>() -> <clinit>
com.google.zxing.client.result.URIResultParser -> com.google.zxing.client.result.URIResultParser:
    java.lang.String PATTERN_END -> PATTERN_END
    java.util.regex.Pattern URL_WITH_PROTOCOL_PATTERN -> URL_WITH_PROTOCOL_PATTERN
    java.util.regex.Pattern URL_WITHOUT_PROTOCOL_PATTERN -> URL_WITHOUT_PROTOCOL_PATTERN
    void <init>() -> <init>
    com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result) -> parse
    boolean isBasicallyValidURI(java.lang.CharSequence) -> isBasicallyValidURI
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
    void <clinit>() -> <clinit>
com.google.zxing.client.result.URLTOResultParser -> com.google.zxing.client.result.URLTOResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.VCardResultParser -> com.google.zxing.client.result.VCardResultParser:
    java.util.regex.Pattern BEGIN_VCARD -> BEGIN_VCARD
    java.util.regex.Pattern VCARD_LIKE_DATE -> VCARD_LIKE_DATE
    java.util.regex.Pattern CR_LF_SPACE_TAB -> CR_LF_SPACE_TAB
    java.util.regex.Pattern NEWLINE_ESCAPE -> NEWLINE_ESCAPE
    java.util.regex.Pattern VCARD_ESCAPES -> VCARD_ESCAPES
    java.util.regex.Pattern EQUALS -> EQUALS
    java.util.regex.Pattern SEMICOLON -> SEMICOLON
    void <init>() -> <init>
    com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result) -> parse
    java.util.List matchVCardPrefixedField(java.lang.CharSequence,java.lang.String,boolean) -> matchVCardPrefixedField
    java.lang.String decodeQuotedPrintable(java.lang.CharSequence,java.lang.String) -> decodeQuotedPrintable
    void maybeAppendFragment(java.io.ByteArrayOutputStream,java.lang.String,java.lang.StringBuilder) -> maybeAppendFragment
    java.util.List matchSingleVCardPrefixedField(java.lang.CharSequence,java.lang.String,boolean) -> matchSingleVCardPrefixedField
    java.lang.String toPrimaryValue(java.util.List) -> toPrimaryValue
    java.lang.String[] toPrimaryValues(java.util.Collection) -> toPrimaryValues
    java.lang.String[] toTypes(java.util.Collection) -> toTypes
    boolean isLikeVCardDate(java.lang.CharSequence) -> isLikeVCardDate
    void formatNames(java.lang.Iterable) -> formatNames
    void maybeAppendComponent(java.lang.String[],int,java.lang.StringBuilder) -> maybeAppendComponent
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
    void <clinit>() -> <clinit>
com.google.zxing.client.result.VEventResultParser -> com.google.zxing.client.result.VEventResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.CalendarParsedResult parse(com.google.zxing.Result) -> parse
    java.lang.String matchSingleVCardPrefixedField(java.lang.CharSequence,java.lang.String,boolean) -> matchSingleVCardPrefixedField
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.client.result.WifiParsedResult -> com.google.zxing.client.result.WifiParsedResult:
    java.lang.String ssid -> ssid
    java.lang.String networkEncryption -> networkEncryption
    java.lang.String password -> password
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getSsid() -> getSsid
    java.lang.String getNetworkEncryption() -> getNetworkEncryption
    java.lang.String getPassword() -> getPassword
    java.lang.String getDisplayResult() -> getDisplayResult
com.google.zxing.client.result.WifiResultParser -> com.google.zxing.client.result.WifiResultParser:
    void <init>() -> <init>
    com.google.zxing.client.result.WifiParsedResult parse(com.google.zxing.Result) -> parse
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> parse
com.google.zxing.common.BitArray -> com.google.zxing.common.BitArray:
    int[] bits -> bits
    int size -> size
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getSize() -> getSize
    int getSizeInBytes() -> getSizeInBytes
    void ensureCapacity(int) -> ensureCapacity
    boolean get(int) -> get
    void set(int) -> set
    void flip(int) -> flip
    int getNextSet(int) -> getNextSet
    int getNextUnset(int) -> getNextUnset
    void setBulk(int,int) -> setBulk
    void setRange(int,int) -> setRange
    void clear() -> clear
    boolean isRange(int,int,boolean) -> isRange
    void appendBit(boolean) -> appendBit
    void appendBits(int,int) -> appendBits
    void appendBitArray(com.google.zxing.common.BitArray) -> appendBitArray
    void xor(com.google.zxing.common.BitArray) -> xor
    void toBytes(int,byte[],int,int) -> toBytes
    int[] getBitArray() -> getBitArray
    void reverse() -> reverse
    int[] makeArray(int) -> makeArray
    java.lang.String toString() -> toString
com.google.zxing.common.BitMatrix -> com.google.zxing.common.BitMatrix:
    int width -> width
    int height -> height
    int rowSize -> rowSize
    int[] bits -> bits
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    boolean get(int,int) -> get
    void set(int,int) -> set
    void flip(int,int) -> flip
    void clear() -> clear
    void setRegion(int,int,int,int) -> setRegion
    com.google.zxing.common.BitArray getRow(int,com.google.zxing.common.BitArray) -> getRow
    void setRow(int,com.google.zxing.common.BitArray) -> setRow
    int[] getEnclosingRectangle() -> getEnclosingRectangle
    int[] getTopLeftOnBit() -> getTopLeftOnBit
    int[] getBottomRightOnBit() -> getBottomRightOnBit
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.zxing.common.BitSource -> com.google.zxing.common.BitSource:
    byte[] bytes -> bytes
    int byteOffset -> byteOffset
    int bitOffset -> bitOffset
    void <init>(byte[]) -> <init>
    int getByteOffset() -> getByteOffset
    int readBits(int) -> readBits
    int available() -> available
com.google.zxing.common.CharacterSetECI -> com.google.zxing.common.CharacterSetECI:
    com.google.zxing.common.CharacterSetECI Cp437 -> Cp437
    com.google.zxing.common.CharacterSetECI ISO8859_1 -> ISO8859_1
    com.google.zxing.common.CharacterSetECI ISO8859_2 -> ISO8859_2
    com.google.zxing.common.CharacterSetECI ISO8859_3 -> ISO8859_3
    com.google.zxing.common.CharacterSetECI ISO8859_4 -> ISO8859_4
    com.google.zxing.common.CharacterSetECI ISO8859_5 -> ISO8859_5
    com.google.zxing.common.CharacterSetECI ISO8859_6 -> ISO8859_6
    com.google.zxing.common.CharacterSetECI ISO8859_7 -> ISO8859_7
    com.google.zxing.common.CharacterSetECI ISO8859_8 -> ISO8859_8
    com.google.zxing.common.CharacterSetECI ISO8859_9 -> ISO8859_9
    com.google.zxing.common.CharacterSetECI ISO8859_10 -> ISO8859_10
    com.google.zxing.common.CharacterSetECI ISO8859_11 -> ISO8859_11
    com.google.zxing.common.CharacterSetECI ISO8859_13 -> ISO8859_13
    com.google.zxing.common.CharacterSetECI ISO8859_14 -> ISO8859_14
    com.google.zxing.common.CharacterSetECI ISO8859_15 -> ISO8859_15
    com.google.zxing.common.CharacterSetECI ISO8859_16 -> ISO8859_16
    com.google.zxing.common.CharacterSetECI SJIS -> SJIS
    com.google.zxing.common.CharacterSetECI Cp1250 -> Cp1250
    com.google.zxing.common.CharacterSetECI Cp1251 -> Cp1251
    com.google.zxing.common.CharacterSetECI Cp1252 -> Cp1252
    com.google.zxing.common.CharacterSetECI Cp1256 -> Cp1256
    com.google.zxing.common.CharacterSetECI UnicodeBigUnmarked -> UnicodeBigUnmarked
    com.google.zxing.common.CharacterSetECI UTF8 -> UTF8
    com.google.zxing.common.CharacterSetECI ASCII -> ASCII
    com.google.zxing.common.CharacterSetECI Big5 -> Big5
    com.google.zxing.common.CharacterSetECI GB18030 -> GB18030
    com.google.zxing.common.CharacterSetECI EUC_KR -> EUC_KR
    java.util.Map VALUE_TO_ECI -> VALUE_TO_ECI
    java.util.Map NAME_TO_ECI -> NAME_TO_ECI
    int[] values -> values
    java.lang.String[] otherEncodingNames -> otherEncodingNames
    com.google.zxing.common.CharacterSetECI[] $VALUES -> $VALUES
    com.google.zxing.common.CharacterSetECI[] values() -> values
    com.google.zxing.common.CharacterSetECI valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String[]) -> <init>
    void <init>(java.lang.String,int,int[],java.lang.String[]) -> <init>
    int getValue() -> getValue
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByValue(int) -> getCharacterSetECIByValue
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String) -> getCharacterSetECIByName
    void <clinit>() -> <clinit>
com.google.zxing.common.DecoderResult -> com.google.zxing.common.DecoderResult:
    byte[] rawBytes -> rawBytes
    java.lang.String text -> text
    java.util.List byteSegments -> byteSegments
    java.lang.String ecLevel -> ecLevel
    void <init>(byte[],java.lang.String,java.util.List,java.lang.String) -> <init>
    byte[] getRawBytes() -> getRawBytes
    java.lang.String getText() -> getText
    java.util.List getByteSegments() -> getByteSegments
    java.lang.String getECLevel() -> getECLevel
com.google.zxing.common.DefaultGridSampler -> com.google.zxing.common.DefaultGridSampler:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> sampleGrid
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> sampleGrid
com.google.zxing.common.DetectorResult -> com.google.zxing.common.DetectorResult:
    com.google.zxing.common.BitMatrix bits -> bits
    com.google.zxing.ResultPoint[] points -> points
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[]) -> <init>
    com.google.zxing.common.BitMatrix getBits() -> getBits
    com.google.zxing.ResultPoint[] getPoints() -> getPoints
com.google.zxing.common.GlobalHistogramBinarizer -> com.google.zxing.common.GlobalHistogramBinarizer:
    int LUMINANCE_BITS -> LUMINANCE_BITS
    int LUMINANCE_SHIFT -> LUMINANCE_SHIFT
    int LUMINANCE_BUCKETS -> LUMINANCE_BUCKETS
    byte[] luminances -> luminances
    int[] buckets -> buckets
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    void initArrays(int) -> initArrays
    int estimateBlackPoint(int[]) -> estimateBlackPoint
com.google.zxing.common.GridSampler -> com.google.zxing.common.GridSampler:
    com.google.zxing.common.GridSampler gridSampler -> gridSampler
    void <init>() -> <init>
    void setGridSampler(com.google.zxing.common.GridSampler) -> setGridSampler
    com.google.zxing.common.GridSampler getInstance() -> getInstance
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> sampleGrid
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> sampleGrid
    void checkAndNudgePoints(com.google.zxing.common.BitMatrix,float[]) -> checkAndNudgePoints
    void <clinit>() -> <clinit>
com.google.zxing.common.HybridBinarizer -> com.google.zxing.common.HybridBinarizer:
    int BLOCK_SIZE_POWER -> BLOCK_SIZE_POWER
    int BLOCK_SIZE -> BLOCK_SIZE
    int BLOCK_SIZE_MASK -> BLOCK_SIZE_MASK
    int MINIMUM_DIMENSION -> MINIMUM_DIMENSION
    com.google.zxing.common.BitMatrix matrix -> matrix
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    void calculateThresholdForBlock(byte[],int,int,int,int,int[][],com.google.zxing.common.BitMatrix) -> calculateThresholdForBlock
    void threshold8x8Block(byte[],int,int,int,int,com.google.zxing.common.BitMatrix) -> threshold8x8Block
    int[][] calculateBlackPoints(byte[],int,int,int,int) -> calculateBlackPoints
com.google.zxing.common.PerspectiveTransform -> com.google.zxing.common.PerspectiveTransform:
    float a11 -> a11
    float a12 -> a12
    float a13 -> a13
    float a21 -> a21
    float a22 -> a22
    float a23 -> a23
    float a31 -> a31
    float a32 -> a32
    float a33 -> a33
    void <init>(float,float,float,float,float,float,float,float,float) -> <init>
    com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> quadrilateralToQuadrilateral
    void transformPoints(float[]) -> transformPoints
    void transformPoints(float[],float[]) -> transformPoints
    com.google.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float) -> squareToQuadrilateral
    com.google.zxing.common.PerspectiveTransform quadrilateralToSquare(float,float,float,float,float,float,float,float) -> quadrilateralToSquare
    com.google.zxing.common.PerspectiveTransform buildAdjoint() -> buildAdjoint
    com.google.zxing.common.PerspectiveTransform times(com.google.zxing.common.PerspectiveTransform) -> times
com.google.zxing.common.StringUtils -> com.google.zxing.common.StringUtils:
    java.lang.String PLATFORM_DEFAULT_ENCODING -> PLATFORM_DEFAULT_ENCODING
    java.lang.String SHIFT_JIS -> SHIFT_JIS
    java.lang.String GB2312 -> GB2312
    java.lang.String EUC_JP -> EUC_JP
    java.lang.String UTF8 -> UTF8
    java.lang.String ISO88591 -> ISO88591
    boolean ASSUME_SHIFT_JIS -> ASSUME_SHIFT_JIS
    void <init>() -> <init>
    java.lang.String guessEncoding(byte[],java.util.Map) -> guessEncoding
    void <clinit>() -> <clinit>
com.google.zxing.common.detector.MonochromeRectangleDetector -> com.google.zxing.common.detector.MonochromeRectangleDetector:
    int MAX_MODULES -> MAX_MODULES
    com.google.zxing.common.BitMatrix image -> image
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.ResultPoint[] detect() -> detect
    com.google.zxing.ResultPoint findCornerFromCenter(int,int,int,int,int,int,int,int,int) -> findCornerFromCenter
    int[] blackWhiteRange(int,int,int,int,boolean) -> blackWhiteRange
com.google.zxing.common.detector.WhiteRectangleDetector -> com.google.zxing.common.detector.WhiteRectangleDetector:
    int INIT_SIZE -> INIT_SIZE
    int CORR -> CORR
    com.google.zxing.common.BitMatrix image -> image
    int height -> height
    int width -> width
    int leftInit -> leftInit
    int rightInit -> rightInit
    int downInit -> downInit
    int upInit -> upInit
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    void <init>(com.google.zxing.common.BitMatrix,int,int,int) -> <init>
    com.google.zxing.ResultPoint[] detect() -> detect
    int round(float) -> round
    com.google.zxing.ResultPoint getBlackPointOnSegment(float,float,float,float) -> getBlackPointOnSegment
    int distanceL2(float,float,float,float) -> distanceL2
    com.google.zxing.ResultPoint[] centerEdges(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> centerEdges
    boolean containsBlackPoint(int,int,int,boolean) -> containsBlackPoint
com.google.zxing.common.reedsolomon.GenericGF -> com.google.zxing.common.reedsolomon.GenericGF:
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_12 -> AZTEC_DATA_12
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_10 -> AZTEC_DATA_10
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_6 -> AZTEC_DATA_6
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_PARAM -> AZTEC_PARAM
    com.google.zxing.common.reedsolomon.GenericGF QR_CODE_FIELD_256 -> QR_CODE_FIELD_256
    com.google.zxing.common.reedsolomon.GenericGF DATA_MATRIX_FIELD_256 -> DATA_MATRIX_FIELD_256
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_8 -> AZTEC_DATA_8
    com.google.zxing.common.reedsolomon.GenericGF MAXICODE_FIELD_64 -> MAXICODE_FIELD_64
    int INITIALIZATION_THRESHOLD -> INITIALIZATION_THRESHOLD
    int[] expTable -> expTable
    int[] logTable -> logTable
    com.google.zxing.common.reedsolomon.GenericGFPoly zero -> zero
    com.google.zxing.common.reedsolomon.GenericGFPoly one -> one
    int size -> size
    int primitive -> primitive
    boolean initialized -> initialized
    void <init>(int,int) -> <init>
    void initialize() -> initialize
    void checkInit() -> checkInit
    com.google.zxing.common.reedsolomon.GenericGFPoly getZero() -> getZero
    com.google.zxing.common.reedsolomon.GenericGFPoly getOne() -> getOne
    com.google.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int) -> buildMonomial
    int addOrSubtract(int,int) -> addOrSubtract
    int exp(int) -> exp
    int log(int) -> log
    int inverse(int) -> inverse
    int multiply(int,int) -> multiply
    int getSize() -> getSize
    void <clinit>() -> <clinit>
com.google.zxing.common.reedsolomon.GenericGFPoly -> com.google.zxing.common.reedsolomon.GenericGFPoly:
    com.google.zxing.common.reedsolomon.GenericGF field -> field
    int[] coefficients -> coefficients
    void <init>(com.google.zxing.common.reedsolomon.GenericGF,int[]) -> <init>
    int[] getCoefficients() -> getCoefficients
    int getDegree() -> getDegree
    boolean isZero() -> isZero
    int getCoefficient(int) -> getCoefficient
    int evaluateAt(int) -> evaluateAt
    com.google.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(com.google.zxing.common.reedsolomon.GenericGFPoly) -> addOrSubtract
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(com.google.zxing.common.reedsolomon.GenericGFPoly) -> multiply
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(int) -> multiply
    com.google.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int) -> multiplyByMonomial
    com.google.zxing.common.reedsolomon.GenericGFPoly[] divide(com.google.zxing.common.reedsolomon.GenericGFPoly) -> divide
    java.lang.String toString() -> toString
com.google.zxing.common.reedsolomon.ReedSolomonDecoder -> com.google.zxing.common.reedsolomon.ReedSolomonDecoder:
    com.google.zxing.common.reedsolomon.GenericGF field -> field
    void <init>(com.google.zxing.common.reedsolomon.GenericGF) -> <init>
    void decode(int[],int) -> decode
    com.google.zxing.common.reedsolomon.GenericGFPoly[] runEuclideanAlgorithm(com.google.zxing.common.reedsolomon.GenericGFPoly,com.google.zxing.common.reedsolomon.GenericGFPoly,int) -> runEuclideanAlgorithm
    int[] findErrorLocations(com.google.zxing.common.reedsolomon.GenericGFPoly) -> findErrorLocations
    int[] findErrorMagnitudes(com.google.zxing.common.reedsolomon.GenericGFPoly,int[],boolean) -> findErrorMagnitudes
com.google.zxing.common.reedsolomon.ReedSolomonEncoder -> com.google.zxing.common.reedsolomon.ReedSolomonEncoder:
    com.google.zxing.common.reedsolomon.GenericGF field -> field
    java.util.List cachedGenerators -> cachedGenerators
    void <init>(com.google.zxing.common.reedsolomon.GenericGF) -> <init>
    com.google.zxing.common.reedsolomon.GenericGFPoly buildGenerator(int) -> buildGenerator
    void encode(int[],int) -> encode
com.google.zxing.common.reedsolomon.ReedSolomonException -> com.google.zxing.common.reedsolomon.ReedSolomonException:
    void <init>(java.lang.String) -> <init>
com.google.zxing.datamatrix.DataMatrixReader -> com.google.zxing.datamatrix.DataMatrixReader:
    com.google.zxing.ResultPoint[] NO_POINTS -> NO_POINTS
    com.google.zxing.datamatrix.decoder.Decoder decoder -> decoder
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> extractPureBits
    int moduleSize(int[],com.google.zxing.common.BitMatrix) -> moduleSize
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.BitMatrixParser -> com.google.zxing.datamatrix.decoder.BitMatrixParser:
    com.google.zxing.common.BitMatrix mappingBitMatrix -> mappingBitMatrix
    com.google.zxing.common.BitMatrix readMappingMatrix -> readMappingMatrix
    com.google.zxing.datamatrix.decoder.Version version -> version
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.datamatrix.decoder.Version getVersion() -> getVersion
    com.google.zxing.datamatrix.decoder.Version readVersion(com.google.zxing.common.BitMatrix) -> readVersion
    byte[] readCodewords() -> readCodewords
    boolean readModule(int,int,int,int) -> readModule
    int readUtah(int,int,int,int) -> readUtah
    int readCorner1(int,int) -> readCorner1
    int readCorner2(int,int) -> readCorner2
    int readCorner3(int,int) -> readCorner3
    int readCorner4(int,int) -> readCorner4
    com.google.zxing.common.BitMatrix extractDataRegion(com.google.zxing.common.BitMatrix) -> extractDataRegion
com.google.zxing.datamatrix.decoder.DataBlock -> com.google.zxing.datamatrix.decoder.DataBlock:
    int numDataCodewords -> numDataCodewords
    byte[] codewords -> codewords
    void <init>(int,byte[]) -> <init>
    com.google.zxing.datamatrix.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.datamatrix.decoder.Version) -> getDataBlocks
    int getNumDataCodewords() -> getNumDataCodewords
    byte[] getCodewords() -> getCodewords
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser -> com.google.zxing.datamatrix.decoder.DecodedBitStreamParser:
    char[] C40_BASIC_SET_CHARS -> C40_BASIC_SET_CHARS
    char[] C40_SHIFT2_SET_CHARS -> C40_SHIFT2_SET_CHARS
    char[] TEXT_BASIC_SET_CHARS -> TEXT_BASIC_SET_CHARS
    char[] TEXT_SHIFT3_SET_CHARS -> TEXT_SHIFT3_SET_CHARS
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(byte[]) -> decode
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode decodeAsciiSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.lang.StringBuilder) -> decodeAsciiSegment
    void decodeC40Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> decodeC40Segment
    void decodeTextSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> decodeTextSegment
    void decodeAnsiX12Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> decodeAnsiX12Segment
    void parseTwoBytes(int,int,int[]) -> parseTwoBytes
    void decodeEdifactSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> decodeEdifactSegment
    void decodeBase256Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.util.Collection) -> decodeBase256Segment
    int unrandomize255State(int,int) -> unrandomize255State
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$1 -> com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$1:
    int[] $SwitchMap$com$google$zxing$datamatrix$decoder$DecodedBitStreamParser$Mode -> $SwitchMap$com$google$zxing$datamatrix$decoder$DecodedBitStreamParser$Mode
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode:
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode PAD_ENCODE -> PAD_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode ASCII_ENCODE -> ASCII_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode C40_ENCODE -> C40_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode TEXT_ENCODE -> TEXT_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode ANSIX12_ENCODE -> ANSIX12_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode EDIFACT_ENCODE -> EDIFACT_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode BASE256_ENCODE -> BASE256_ENCODE
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode[] $VALUES -> $VALUES
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode[] values() -> values
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.Decoder -> com.google.zxing.datamatrix.decoder.Decoder:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> rsDecoder
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(boolean[][]) -> decode
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> decode
    void correctErrors(byte[],int) -> correctErrors
com.google.zxing.datamatrix.decoder.Version -> com.google.zxing.datamatrix.decoder.Version:
    com.google.zxing.datamatrix.decoder.Version[] VERSIONS -> VERSIONS
    int versionNumber -> versionNumber
    int symbolSizeRows -> symbolSizeRows
    int symbolSizeColumns -> symbolSizeColumns
    int dataRegionSizeRows -> dataRegionSizeRows
    int dataRegionSizeColumns -> dataRegionSizeColumns
    com.google.zxing.datamatrix.decoder.Version$ECBlocks ecBlocks -> ecBlocks
    int totalCodewords -> totalCodewords
    void <init>(int,int,int,int,int,com.google.zxing.datamatrix.decoder.Version$ECBlocks) -> <init>
    int getVersionNumber() -> getVersionNumber
    int getSymbolSizeRows() -> getSymbolSizeRows
    int getSymbolSizeColumns() -> getSymbolSizeColumns
    int getDataRegionSizeRows() -> getDataRegionSizeRows
    int getDataRegionSizeColumns() -> getDataRegionSizeColumns
    int getTotalCodewords() -> getTotalCodewords
    com.google.zxing.datamatrix.decoder.Version$ECBlocks getECBlocks() -> getECBlocks
    com.google.zxing.datamatrix.decoder.Version getVersionForDimensions(int,int) -> getVersionForDimensions
    java.lang.String toString() -> toString
    com.google.zxing.datamatrix.decoder.Version[] buildVersions() -> buildVersions
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.Version$1 -> com.google.zxing.datamatrix.decoder.Version$1:
com.google.zxing.datamatrix.decoder.Version$ECB -> com.google.zxing.datamatrix.decoder.Version$ECB:
    int count -> count
    int dataCodewords -> dataCodewords
    void <init>(int,int) -> <init>
    int getCount() -> getCount
    int getDataCodewords() -> getDataCodewords
    void <init>(int,int,com.google.zxing.datamatrix.decoder.Version$1) -> <init>
com.google.zxing.datamatrix.decoder.Version$ECBlocks -> com.google.zxing.datamatrix.decoder.Version$ECBlocks:
    int ecCodewords -> ecCodewords
    com.google.zxing.datamatrix.decoder.Version$ECB[] ecBlocks -> ecBlocks
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB) -> <init>
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$ECB) -> <init>
    int getECCodewords() -> getECCodewords
    com.google.zxing.datamatrix.decoder.Version$ECB[] getECBlocks() -> getECBlocks
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$1) -> <init>
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$1) -> <init>
com.google.zxing.datamatrix.detector.Detector -> com.google.zxing.datamatrix.detector.Detector:
    com.google.zxing.common.BitMatrix image -> image
    com.google.zxing.common.detector.WhiteRectangleDetector rectangleDetector -> rectangleDetector
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.common.DetectorResult detect() -> detect
    com.google.zxing.ResultPoint correctTopRightRectangular(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> correctTopRightRectangular
    com.google.zxing.ResultPoint correctTopRight(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> correctTopRight
    boolean isValid(com.google.zxing.ResultPoint) -> isValid
    int round(float) -> round
    int distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> distance
    void increment(java.util.Map,com.google.zxing.ResultPoint) -> increment
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> sampleGrid
    com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions transitionsBetween(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> transitionsBetween
com.google.zxing.datamatrix.detector.Detector$1 -> com.google.zxing.datamatrix.detector.Detector$1:
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions -> com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions:
    com.google.zxing.ResultPoint from -> from
    com.google.zxing.ResultPoint to -> to
    int transitions -> transitions
    void <init>(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> <init>
    com.google.zxing.ResultPoint getFrom() -> getFrom
    com.google.zxing.ResultPoint getTo() -> getTo
    int getTransitions() -> getTransitions
    java.lang.String toString() -> toString
    void <init>(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,com.google.zxing.datamatrix.detector.Detector$1) -> <init>
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitionsComparator -> com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitionsComparator:
    void <init>() -> <init>
    int compare(com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions,com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(com.google.zxing.datamatrix.detector.Detector$1) -> <init>
com.google.zxing.maxicode.MaxiCodeReader -> com.google.zxing.maxicode.MaxiCodeReader:
    com.google.zxing.ResultPoint[] NO_POINTS -> NO_POINTS
    int MATRIX_WIDTH -> MATRIX_WIDTH
    int MATRIX_HEIGHT -> MATRIX_HEIGHT
    com.google.zxing.maxicode.decoder.Decoder decoder -> decoder
    void <init>() -> <init>
    com.google.zxing.maxicode.decoder.Decoder getDecoder() -> getDecoder
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> extractPureBits
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.BitMatrixParser -> com.google.zxing.maxicode.decoder.BitMatrixParser:
    int[][] BITNR -> BITNR
    com.google.zxing.common.BitMatrix bitMatrix -> bitMatrix
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    byte[] readCodewords() -> readCodewords
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.DecodedBitStreamParser -> com.google.zxing.maxicode.decoder.DecodedBitStreamParser:
    char SHIFTA -> SHIFTA
    char SHIFTB -> SHIFTB
    char SHIFTC -> SHIFTC
    char SHIFTD -> SHIFTD
    char SHIFTE -> SHIFTE
    char TWOSHIFTA -> TWOSHIFTA
    char THREESHIFTA -> THREESHIFTA
    char LATCHA -> LATCHA
    char LATCHB -> LATCHB
    char LOCK -> LOCK
    char ECI -> ECI
    char NS -> NS
    char PAD -> PAD
    char FS -> FS
    char GS -> GS
    char RS -> RS
    java.text.NumberFormat NINE_DIGITS -> NINE_DIGITS
    java.text.NumberFormat THREE_DIGITS -> THREE_DIGITS
    java.lang.String[] SETS -> SETS
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(byte[],int) -> decode
    int getBit(int,byte[]) -> getBit
    int getInt(byte[],byte[]) -> getInt
    int getCountry(byte[]) -> getCountry
    int getServiceClass(byte[]) -> getServiceClass
    int getPostCode2Length(byte[]) -> getPostCode2Length
    int getPostCode2(byte[]) -> getPostCode2
    java.lang.String getPostCode3(byte[]) -> getPostCode3
    java.lang.String getMessage(byte[],int,int) -> getMessage
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.Decoder -> com.google.zxing.maxicode.decoder.Decoder:
    int ALL -> ALL
    int EVEN -> EVEN
    int ODD -> ODD
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> rsDecoder
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> decode
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> decode
    void correctErrors(byte[],int,int,int,int) -> correctErrors
com.google.zxing.multi.ByQuadrantReader -> com.google.zxing.multi.ByQuadrantReader:
    com.google.zxing.Reader delegate -> delegate
    void <init>(com.google.zxing.Reader) -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
com.google.zxing.multi.GenericMultipleBarcodeReader -> com.google.zxing.multi.GenericMultipleBarcodeReader:
    int MIN_DIMENSION_TO_RECUR -> MIN_DIMENSION_TO_RECUR
    com.google.zxing.Reader delegate -> delegate
    void <init>(com.google.zxing.Reader) -> <init>
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap) -> decodeMultiple
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map) -> decodeMultiple
    void doDecodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map,java.util.List,int,int) -> doDecodeMultiple
    com.google.zxing.Result translateResultPoints(com.google.zxing.Result,int,int) -> translateResultPoints
com.google.zxing.multi.MultipleBarcodeReader -> com.google.zxing.multi.MultipleBarcodeReader:
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap) -> decodeMultiple
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map) -> decodeMultiple
com.google.zxing.multi.qrcode.QRCodeMultiReader -> com.google.zxing.multi.qrcode.QRCodeMultiReader:
    com.google.zxing.Result[] EMPTY_RESULT_ARRAY -> EMPTY_RESULT_ARRAY
    void <init>() -> <init>
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap) -> decodeMultiple
    com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map) -> decodeMultiple
    void <clinit>() -> <clinit>
com.google.zxing.multi.qrcode.detector.MultiDetector -> com.google.zxing.multi.qrcode.detector.MultiDetector:
    com.google.zxing.common.DetectorResult[] EMPTY_DETECTOR_RESULTS -> EMPTY_DETECTOR_RESULTS
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.common.DetectorResult[] detectMulti(java.util.Map) -> detectMulti
    void <clinit>() -> <clinit>
com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder -> com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder:
    com.google.zxing.qrcode.detector.FinderPatternInfo[] EMPTY_RESULT_ARRAY -> EMPTY_RESULT_ARRAY
    float MAX_MODULE_COUNT_PER_EDGE -> MAX_MODULE_COUNT_PER_EDGE
    float MIN_MODULE_COUNT_PER_EDGE -> MIN_MODULE_COUNT_PER_EDGE
    float DIFF_MODSIZE_CUTOFF_PERCENT -> DIFF_MODSIZE_CUTOFF_PERCENT
    float DIFF_MODSIZE_CUTOFF -> DIFF_MODSIZE_CUTOFF
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPointCallback) -> <init>
    com.google.zxing.qrcode.detector.FinderPattern[][] selectMutipleBestPatterns() -> selectMutipleBestPatterns
    com.google.zxing.qrcode.detector.FinderPatternInfo[] findMulti(java.util.Map) -> findMulti
    void <clinit>() -> <clinit>
com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder$1 -> com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder$1:
com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder$ModuleSizeComparator -> com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder$ModuleSizeComparator:
    void <init>() -> <init>
    int compare(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder$1) -> <init>
com.google.zxing.oned.CodaBarReader -> com.google.zxing.oned.CodaBarReader:
    java.lang.String ALPHABET_STRING -> ALPHABET_STRING
    char[] ALPHABET -> ALPHABET
    int[] CHARACTER_ENCODINGS -> CHARACTER_ENCODINGS
    int minCharacterLength -> minCharacterLength
    char[] STARTEND_ENCODING -> STARTEND_ENCODING
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    int[] findAsteriskPattern(com.google.zxing.common.BitArray) -> findAsteriskPattern
    boolean arrayContains(char[],char) -> arrayContains
    char toNarrowWidePattern(int[]) -> toNarrowWidePattern
    void <clinit>() -> <clinit>
com.google.zxing.oned.CodaBarWriter -> com.google.zxing.oned.CodaBarWriter:
    void <init>() -> <init>
    byte[] encode(java.lang.String) -> encode
com.google.zxing.oned.Code128Reader -> com.google.zxing.oned.Code128Reader:
    int[][] CODE_PATTERNS -> CODE_PATTERNS
    int MAX_AVG_VARIANCE -> MAX_AVG_VARIANCE
    int MAX_INDIVIDUAL_VARIANCE -> MAX_INDIVIDUAL_VARIANCE
    int CODE_SHIFT -> CODE_SHIFT
    int CODE_CODE_C -> CODE_CODE_C
    int CODE_CODE_B -> CODE_CODE_B
    int CODE_CODE_A -> CODE_CODE_A
    int CODE_FNC_1 -> CODE_FNC_1
    int CODE_FNC_2 -> CODE_FNC_2
    int CODE_FNC_3 -> CODE_FNC_3
    int CODE_FNC_4_A -> CODE_FNC_4_A
    int CODE_FNC_4_B -> CODE_FNC_4_B
    int CODE_START_A -> CODE_START_A
    int CODE_START_B -> CODE_START_B
    int CODE_START_C -> CODE_START_C
    int CODE_STOP -> CODE_STOP
    void <init>() -> <init>
    int[] findStartPattern(com.google.zxing.common.BitArray) -> findStartPattern
    int decodeCode(com.google.zxing.common.BitArray,int[],int) -> decodeCode
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer -> com.google.zxing.oned.Code128Writer:
    int CODE_START_B -> CODE_START_B
    int CODE_START_C -> CODE_START_C
    int CODE_CODE_B -> CODE_CODE_B
    int CODE_CODE_C -> CODE_CODE_C
    int CODE_STOP -> CODE_STOP
    char ESCAPE_FNC_1 -> ESCAPE_FNC_1
    char ESCAPE_FNC_2 -> ESCAPE_FNC_2
    char ESCAPE_FNC_3 -> ESCAPE_FNC_3
    char ESCAPE_FNC_4 -> ESCAPE_FNC_4
    int CODE_FNC_1 -> CODE_FNC_1
    int CODE_FNC_2 -> CODE_FNC_2
    int CODE_FNC_3 -> CODE_FNC_3
    int CODE_FNC_4_B -> CODE_FNC_4_B
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    byte[] encode(java.lang.String) -> encode
    boolean isDigits(java.lang.CharSequence,int,int) -> isDigits
com.google.zxing.oned.Code39Reader -> com.google.zxing.oned.Code39Reader:
    java.lang.String ALPHABET_STRING -> ALPHABET_STRING
    char[] ALPHABET -> ALPHABET
    int[] CHARACTER_ENCODINGS -> CHARACTER_ENCODINGS
    int ASTERISK_ENCODING -> ASTERISK_ENCODING
    boolean usingCheckDigit -> usingCheckDigit
    boolean extendedMode -> extendedMode
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(boolean,boolean) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    int[] findAsteriskPattern(com.google.zxing.common.BitArray,int[]) -> findAsteriskPattern
    int toNarrowWidePattern(int[]) -> toNarrowWidePattern
    char patternToChar(int) -> patternToChar
    java.lang.String decodeExtended(java.lang.CharSequence) -> decodeExtended
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code39Writer -> com.google.zxing.oned.Code39Writer:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    byte[] encode(java.lang.String) -> encode
    void toIntArray(int,int[]) -> toIntArray
com.google.zxing.oned.Code93Reader -> com.google.zxing.oned.Code93Reader:
    java.lang.String ALPHABET_STRING -> ALPHABET_STRING
    char[] ALPHABET -> ALPHABET
    int[] CHARACTER_ENCODINGS -> CHARACTER_ENCODINGS
    int ASTERISK_ENCODING -> ASTERISK_ENCODING
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    int[] findAsteriskPattern(com.google.zxing.common.BitArray) -> findAsteriskPattern
    int toPattern(int[]) -> toPattern
    char patternToChar(int) -> patternToChar
    java.lang.String decodeExtended(java.lang.CharSequence) -> decodeExtended
    void checkChecksums(java.lang.CharSequence) -> checkChecksums
    void checkOneChecksum(java.lang.CharSequence,int,int) -> checkOneChecksum
    void <clinit>() -> <clinit>
com.google.zxing.oned.EAN13Reader -> com.google.zxing.oned.EAN13Reader:
    int[] FIRST_DIGIT_ENCODINGS -> FIRST_DIGIT_ENCODINGS
    int[] decodeMiddleCounters -> decodeMiddleCounters
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    void determineFirstDigit(java.lang.StringBuilder,int) -> determineFirstDigit
    void <clinit>() -> <clinit>
com.google.zxing.oned.EAN13Writer -> com.google.zxing.oned.EAN13Writer:
    int CODE_WIDTH -> CODE_WIDTH
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    byte[] encode(java.lang.String) -> encode
com.google.zxing.oned.EAN8Reader -> com.google.zxing.oned.EAN8Reader:
    int[] decodeMiddleCounters -> decodeMiddleCounters
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
com.google.zxing.oned.EAN8Writer -> com.google.zxing.oned.EAN8Writer:
    int CODE_WIDTH -> CODE_WIDTH
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    byte[] encode(java.lang.String) -> encode
com.google.zxing.oned.EANManufacturerOrgSupport -> com.google.zxing.oned.EANManufacturerOrgSupport:
    java.util.List ranges -> ranges
    java.util.List countryIdentifiers -> countryIdentifiers
    void <init>() -> <init>
    java.lang.String lookupCountryIdentifier(java.lang.String) -> lookupCountryIdentifier
    void add(int[],java.lang.String) -> add
    void initIfNeeded() -> initIfNeeded
com.google.zxing.oned.ITFReader -> com.google.zxing.oned.ITFReader:
    int MAX_AVG_VARIANCE -> MAX_AVG_VARIANCE
    int MAX_INDIVIDUAL_VARIANCE -> MAX_INDIVIDUAL_VARIANCE
    int W -> W
    int N -> N
    int[] DEFAULT_ALLOWED_LENGTHS -> DEFAULT_ALLOWED_LENGTHS
    int narrowLineWidth -> narrowLineWidth
    int[] START_PATTERN -> START_PATTERN
    int[] END_PATTERN_REVERSED -> END_PATTERN_REVERSED
    int[][] PATTERNS -> PATTERNS
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void decodeMiddle(com.google.zxing.common.BitArray,int,int,java.lang.StringBuilder) -> decodeMiddle
    int[] decodeStart(com.google.zxing.common.BitArray) -> decodeStart
    void validateQuietZone(com.google.zxing.common.BitArray,int) -> validateQuietZone
    int skipWhiteSpace(com.google.zxing.common.BitArray) -> skipWhiteSpace
    int[] decodeEnd(com.google.zxing.common.BitArray) -> decodeEnd
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,int[]) -> findGuardPattern
    int decodeDigit(int[]) -> decodeDigit
    void <clinit>() -> <clinit>
com.google.zxing.oned.ITFWriter -> com.google.zxing.oned.ITFWriter:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    byte[] encode(java.lang.String) -> encode
com.google.zxing.oned.MultiFormatOneDReader -> com.google.zxing.oned.MultiFormatOneDReader:
    com.google.zxing.oned.OneDReader[] readers -> readers
    void <init>(java.util.Map) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void reset() -> reset
com.google.zxing.oned.MultiFormatUPCEANReader -> com.google.zxing.oned.MultiFormatUPCEANReader:
    com.google.zxing.oned.UPCEANReader[] readers -> readers
    void <init>(java.util.Map) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void reset() -> reset
com.google.zxing.oned.OneDReader -> com.google.zxing.oned.OneDReader:
    int INTEGER_MATH_SHIFT -> INTEGER_MATH_SHIFT
    int PATTERN_MATCH_RESULT_SCALE_FACTOR -> PATTERN_MATCH_RESULT_SCALE_FACTOR
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.Result doDecode(com.google.zxing.BinaryBitmap,java.util.Map) -> doDecode
    void recordPattern(com.google.zxing.common.BitArray,int,int[]) -> recordPattern
    void recordPatternInReverse(com.google.zxing.common.BitArray,int,int[]) -> recordPatternInReverse
    int patternMatchVariance(int[],int[],int) -> patternMatchVariance
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
com.google.zxing.oned.OneDimensionalCodeWriter -> com.google.zxing.oned.OneDimensionalCodeWriter:
    int sidesMargin -> sidesMargin
    void <init>(int) -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    com.google.zxing.common.BitMatrix renderResult(byte[],int,int) -> renderResult
    int appendPattern(byte[],int,int[],int) -> appendPattern
    byte[] encode(java.lang.String) -> encode
com.google.zxing.oned.UPCAReader -> com.google.zxing.oned.UPCAReader:
    com.google.zxing.oned.UPCEANReader ean13Reader -> ean13Reader
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> decodeRow
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    com.google.zxing.Result maybeReturnResult(com.google.zxing.Result) -> maybeReturnResult
com.google.zxing.oned.UPCAWriter -> com.google.zxing.oned.UPCAWriter:
    com.google.zxing.oned.EAN13Writer subWriter -> subWriter
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    java.lang.String preencode(java.lang.String) -> preencode
com.google.zxing.oned.UPCEANExtensionSupport -> com.google.zxing.oned.UPCEANExtensionSupport:
    int[] EXTENSION_START_PATTERN -> EXTENSION_START_PATTERN
    int[] CHECK_DIGIT_ENCODINGS -> CHECK_DIGIT_ENCODINGS
    int[] decodeMiddleCounters -> decodeMiddleCounters
    java.lang.StringBuilder decodeRowStringBuffer -> decodeRowStringBuffer
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int) -> decodeRow
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    int extensionChecksum(java.lang.CharSequence) -> extensionChecksum
    int determineCheckDigit(int) -> determineCheckDigit
    java.util.Map parseExtensionString(java.lang.String) -> parseExtensionString
    java.lang.Integer parseExtension2String(java.lang.String) -> parseExtension2String
    java.lang.String parseExtension5String(java.lang.String) -> parseExtension5String
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEANReader -> com.google.zxing.oned.UPCEANReader:
    int MAX_AVG_VARIANCE -> MAX_AVG_VARIANCE
    int MAX_INDIVIDUAL_VARIANCE -> MAX_INDIVIDUAL_VARIANCE
    int[] START_END_PATTERN -> START_END_PATTERN
    int[] MIDDLE_PATTERN -> MIDDLE_PATTERN
    int[][] L_PATTERNS -> L_PATTERNS
    int[][] L_AND_G_PATTERNS -> L_AND_G_PATTERNS
    java.lang.StringBuilder decodeRowStringBuffer -> decodeRowStringBuffer
    com.google.zxing.oned.UPCEANExtensionSupport extensionReader -> extensionReader
    com.google.zxing.oned.EANManufacturerOrgSupport eanManSupport -> eanManSupport
    void <init>() -> <init>
    int[] findStartGuardPattern(com.google.zxing.common.BitArray) -> findStartGuardPattern
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> decodeRow
    boolean checkChecksum(java.lang.String) -> checkChecksum
    boolean checkStandardUPCEANChecksum(java.lang.CharSequence) -> checkStandardUPCEANChecksum
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> decodeEnd
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> findGuardPattern
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[],int[]) -> findGuardPattern
    int decodeDigit(com.google.zxing.common.BitArray,int[],int,int[][]) -> decodeDigit
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEANWriter -> com.google.zxing.oned.UPCEANWriter:
    void <init>() -> <init>
com.google.zxing.oned.UPCEReader -> com.google.zxing.oned.UPCEReader:
    int[] MIDDLE_END_PATTERN -> MIDDLE_END_PATTERN
    int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS -> NUMSYS_AND_CHECK_DIGIT_PATTERNS
    int[] decodeMiddleCounters -> decodeMiddleCounters
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> decodeMiddle
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> decodeEnd
    boolean checkChecksum(java.lang.String) -> checkChecksum
    void determineNumSysAndCheckDigit(java.lang.StringBuilder,int) -> determineNumSysAndCheckDigit
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> getBarcodeFormat
    java.lang.String convertUPCEtoUPCA(java.lang.String) -> convertUPCEtoUPCA
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.AbstractRSSReader -> com.google.zxing.oned.rss.AbstractRSSReader:
    int MAX_AVG_VARIANCE -> MAX_AVG_VARIANCE
    int MAX_INDIVIDUAL_VARIANCE -> MAX_INDIVIDUAL_VARIANCE
    float MIN_FINDER_PATTERN_RATIO -> MIN_FINDER_PATTERN_RATIO
    float MAX_FINDER_PATTERN_RATIO -> MAX_FINDER_PATTERN_RATIO
    int[] decodeFinderCounters -> decodeFinderCounters
    int[] dataCharacterCounters -> dataCharacterCounters
    float[] oddRoundingErrors -> oddRoundingErrors
    float[] evenRoundingErrors -> evenRoundingErrors
    int[] oddCounts -> oddCounts
    int[] evenCounts -> evenCounts
    void <init>() -> <init>
    int[] getDecodeFinderCounters() -> getDecodeFinderCounters
    int[] getDataCharacterCounters() -> getDataCharacterCounters
    float[] getOddRoundingErrors() -> getOddRoundingErrors
    float[] getEvenRoundingErrors() -> getEvenRoundingErrors
    int[] getOddCounts() -> getOddCounts
    int[] getEvenCounts() -> getEvenCounts
    int parseFinderValue(int[],int[][]) -> parseFinderValue
    int count(int[]) -> count
    void increment(int[],float[]) -> increment
    void decrement(int[],float[]) -> decrement
    boolean isFinderPattern(int[]) -> isFinderPattern
com.google.zxing.oned.rss.DataCharacter -> com.google.zxing.oned.rss.DataCharacter:
    int value -> value
    int checksumPortion -> checksumPortion
    void <init>(int,int) -> <init>
    int getValue() -> getValue
    int getChecksumPortion() -> getChecksumPortion
com.google.zxing.oned.rss.FinderPattern -> com.google.zxing.oned.rss.FinderPattern:
    int value -> value
    int[] startEnd -> startEnd
    com.google.zxing.ResultPoint[] resultPoints -> resultPoints
    void <init>(int,int[],int,int,int) -> <init>
    int getValue() -> getValue
    int[] getStartEnd() -> getStartEnd
    com.google.zxing.ResultPoint[] getResultPoints() -> getResultPoints
com.google.zxing.oned.rss.Pair -> com.google.zxing.oned.rss.Pair:
    com.google.zxing.oned.rss.FinderPattern finderPattern -> finderPattern
    int count -> count
    void <init>(int,int,com.google.zxing.oned.rss.FinderPattern) -> <init>
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> getFinderPattern
    int getCount() -> getCount
    void incrementCount() -> incrementCount
com.google.zxing.oned.rss.RSS14Reader -> com.google.zxing.oned.rss.RSS14Reader:
    int[] OUTSIDE_EVEN_TOTAL_SUBSET -> OUTSIDE_EVEN_TOTAL_SUBSET
    int[] INSIDE_ODD_TOTAL_SUBSET -> INSIDE_ODD_TOTAL_SUBSET
    int[] OUTSIDE_GSUM -> OUTSIDE_GSUM
    int[] INSIDE_GSUM -> INSIDE_GSUM
    int[] OUTSIDE_ODD_WIDEST -> OUTSIDE_ODD_WIDEST
    int[] INSIDE_ODD_WIDEST -> INSIDE_ODD_WIDEST
    int[][] FINDER_PATTERNS -> FINDER_PATTERNS
    java.util.List possibleLeftPairs -> possibleLeftPairs
    java.util.List possibleRightPairs -> possibleRightPairs
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void addOrTally(java.util.Collection,com.google.zxing.oned.rss.Pair) -> addOrTally
    void reset() -> reset
    com.google.zxing.Result constructResult(com.google.zxing.oned.rss.Pair,com.google.zxing.oned.rss.Pair) -> constructResult
    boolean checkChecksum(com.google.zxing.oned.rss.Pair,com.google.zxing.oned.rss.Pair) -> checkChecksum
    com.google.zxing.oned.rss.Pair decodePair(com.google.zxing.common.BitArray,boolean,int,java.util.Map) -> decodePair
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean) -> decodeDataCharacter
    int[] findFinderPattern(com.google.zxing.common.BitArray,int,boolean) -> findFinderPattern
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> parseFoundFinderPattern
    void adjustOddEvenCounts(boolean,int) -> adjustOddEvenCounts
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.RSSUtils -> com.google.zxing.oned.rss.RSSUtils:
    void <init>() -> <init>
    int[] getRSSwidths(int,int,int,int,boolean) -> getRSSwidths
    int getRSSvalue(int[],int,boolean) -> getRSSvalue
    int combins(int,int) -> combins
    int[] elements(int[],int,int) -> elements
com.google.zxing.oned.rss.expanded.BitArrayBuilder -> com.google.zxing.oned.rss.expanded.BitArrayBuilder:
    void <init>() -> <init>
    com.google.zxing.common.BitArray buildBitArray(java.util.List) -> buildBitArray
com.google.zxing.oned.rss.expanded.ExpandedPair -> com.google.zxing.oned.rss.expanded.ExpandedPair:
    boolean mayBeLast -> mayBeLast
    com.google.zxing.oned.rss.DataCharacter leftChar -> leftChar
    com.google.zxing.oned.rss.DataCharacter rightChar -> rightChar
    com.google.zxing.oned.rss.FinderPattern finderPattern -> finderPattern
    void <init>(com.google.zxing.oned.rss.DataCharacter,com.google.zxing.oned.rss.DataCharacter,com.google.zxing.oned.rss.FinderPattern,boolean) -> <init>
    boolean mayBeLast() -> mayBeLast
    com.google.zxing.oned.rss.DataCharacter getLeftChar() -> getLeftChar
    com.google.zxing.oned.rss.DataCharacter getRightChar() -> getRightChar
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> getFinderPattern
    boolean mustBeLast() -> mustBeLast
com.google.zxing.oned.rss.expanded.RSSExpandedReader -> com.google.zxing.oned.rss.expanded.RSSExpandedReader:
    int[] SYMBOL_WIDEST -> SYMBOL_WIDEST
    int[] EVEN_TOTAL_SUBSET -> EVEN_TOTAL_SUBSET
    int[] GSUM -> GSUM
    int[][] FINDER_PATTERNS -> FINDER_PATTERNS
    int[][] WEIGHTS -> WEIGHTS
    int FINDER_PAT_A -> FINDER_PAT_A
    int FINDER_PAT_B -> FINDER_PAT_B
    int FINDER_PAT_C -> FINDER_PAT_C
    int FINDER_PAT_D -> FINDER_PAT_D
    int FINDER_PAT_E -> FINDER_PAT_E
    int FINDER_PAT_F -> FINDER_PAT_F
    int[][] FINDER_PATTERN_SEQUENCES -> FINDER_PATTERN_SEQUENCES
    int LONGEST_SEQUENCE_SIZE -> LONGEST_SEQUENCE_SIZE
    int MAX_PAIRS -> MAX_PAIRS
    java.util.List pairs -> pairs
    int[] startEnd -> startEnd
    int[] currentSequence -> currentSequence
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> decodeRow
    void reset() -> reset
    java.util.List decodeRow2pairs(int,com.google.zxing.common.BitArray) -> decodeRow2pairs
    com.google.zxing.Result constructResult(java.util.List) -> constructResult
    boolean checkChecksum() -> checkChecksum
    int getNextSecondBar(com.google.zxing.common.BitArray,int) -> getNextSecondBar
    com.google.zxing.oned.rss.expanded.ExpandedPair retrieveNextPair(com.google.zxing.common.BitArray,java.util.List,int) -> retrieveNextPair
    boolean checkPairSequence(java.util.List,com.google.zxing.oned.rss.FinderPattern) -> checkPairSequence
    void findNextPair(com.google.zxing.common.BitArray,java.util.List,int) -> findNextPair
    void reverseCounters(int[]) -> reverseCounters
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern(com.google.zxing.common.BitArray,int,boolean) -> parseFoundFinderPattern
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> decodeDataCharacter
    boolean isNotA1left(com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> isNotA1left
    void adjustOddEvenCounts(int) -> adjustOddEvenCounts
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.AI013103decoder -> com.google.zxing.oned.rss.expanded.decoders.AI013103decoder:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void addWeightCode(java.lang.StringBuilder,int) -> addWeightCode
    int checkWeight(int) -> checkWeight
com.google.zxing.oned.rss.expanded.decoders.AI01320xDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI01320xDecoder:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void addWeightCode(java.lang.StringBuilder,int) -> addWeightCode
    int checkWeight(int) -> checkWeight
com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder:
    int HEADER_SIZE -> HEADER_SIZE
    int LAST_DIGIT_SIZE -> LAST_DIGIT_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> parseInformation
com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder:
    int HEADER_SIZE -> HEADER_SIZE
    int LAST_DIGIT_SIZE -> LAST_DIGIT_SIZE
    int FIRST_THREE_DIGITS_SIZE -> FIRST_THREE_DIGITS_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> parseInformation
com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder:
    int HEADER_SIZE -> HEADER_SIZE
    int WEIGHT_SIZE -> WEIGHT_SIZE
    int DATE_SIZE -> DATE_SIZE
    java.lang.String dateCode -> dateCode
    java.lang.String firstAIdigits -> firstAIdigits
    void <init>(com.google.zxing.common.BitArray,java.lang.String,java.lang.String) -> <init>
    java.lang.String parseInformation() -> parseInformation
    void encodeCompressedDate(java.lang.StringBuilder,int) -> encodeCompressedDate
    void addWeightCode(java.lang.StringBuilder,int) -> addWeightCode
    int checkWeight(int) -> checkWeight
com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder:
    int HEADER_SIZE -> HEADER_SIZE
    int WEIGHT_SIZE -> WEIGHT_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> parseInformation
com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs -> com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs:
    int HEADER_SIZE -> HEADER_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> parseInformation
com.google.zxing.oned.rss.expanded.decoders.AI01decoder -> com.google.zxing.oned.rss.expanded.decoders.AI01decoder:
    int GTIN_SIZE -> GTIN_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void encodeCompressedGtin(java.lang.StringBuilder,int) -> encodeCompressedGtin
    void encodeCompressedGtinWithoutAI(java.lang.StringBuilder,int,int) -> encodeCompressedGtinWithoutAI
    void appendCheckDigit(java.lang.StringBuilder,int) -> appendCheckDigit
com.google.zxing.oned.rss.expanded.decoders.AI01weightDecoder -> com.google.zxing.oned.rss.expanded.decoders.AI01weightDecoder:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void encodeCompressedWeight(java.lang.StringBuilder,int,int) -> encodeCompressedWeight
    void addWeightCode(java.lang.StringBuilder,int) -> addWeightCode
    int checkWeight(int) -> checkWeight
com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder -> com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder:
    com.google.zxing.common.BitArray information -> information
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder generalDecoder -> generalDecoder
    void <init>(com.google.zxing.common.BitArray) -> <init>
    com.google.zxing.common.BitArray getInformation() -> getInformation
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder getGeneralDecoder() -> getGeneralDecoder
    java.lang.String parseInformation() -> parseInformation
    com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder createDecoder(com.google.zxing.common.BitArray) -> createDecoder
com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder -> com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder:
    int HEADER_SIZE -> HEADER_SIZE
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> parseInformation
com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult -> com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult:
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodedInformation -> decodedInformation
    boolean finished -> finished
    void <init>(boolean) -> <init>
    void <init>(com.google.zxing.oned.rss.expanded.decoders.DecodedInformation,boolean) -> <init>
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation getDecodedInformation() -> getDecodedInformation
    boolean isFinished() -> isFinished
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState -> com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState:
    int position -> position
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State encoding -> encoding
    void <init>() -> <init>
    int getPosition() -> getPosition
    void setPosition(int) -> setPosition
    void incrementPosition(int) -> incrementPosition
    boolean isAlpha() -> isAlpha
    boolean isNumeric() -> isNumeric
    boolean isIsoIec646() -> isIsoIec646
    void setNumeric() -> setNumeric
    void setAlpha() -> setAlpha
    void setIsoIec646() -> setIsoIec646
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State -> com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State:
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State NUMERIC -> NUMERIC
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State ALPHA -> ALPHA
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State ISO_IEC_646 -> ISO_IEC_646
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State[] $VALUES -> $VALUES
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State[] values() -> values
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.DecodedChar -> com.google.zxing.oned.rss.expanded.decoders.DecodedChar:
    char value -> value
    char FNC1 -> FNC1
    void <init>(int,char) -> <init>
    char getValue() -> getValue
    boolean isFNC1() -> isFNC1
com.google.zxing.oned.rss.expanded.decoders.DecodedInformation -> com.google.zxing.oned.rss.expanded.decoders.DecodedInformation:
    java.lang.String newString -> newString
    int remainingValue -> remainingValue
    boolean remaining -> remaining
    void <init>(int,java.lang.String) -> <init>
    void <init>(int,java.lang.String,int) -> <init>
    java.lang.String getNewString() -> getNewString
    boolean isRemaining() -> isRemaining
    int getRemainingValue() -> getRemainingValue
com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric -> com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric:
    int firstDigit -> firstDigit
    int secondDigit -> secondDigit
    int FNC1 -> FNC1
    void <init>(int,int,int) -> <init>
    int getFirstDigit() -> getFirstDigit
    int getSecondDigit() -> getSecondDigit
    int getValue() -> getValue
    boolean isFirstDigitFNC1() -> isFirstDigitFNC1
    boolean isSecondDigitFNC1() -> isSecondDigitFNC1
    boolean isAnyFNC1() -> isAnyFNC1
com.google.zxing.oned.rss.expanded.decoders.DecodedObject -> com.google.zxing.oned.rss.expanded.decoders.DecodedObject:
    int newPosition -> newPosition
    void <init>(int) -> <init>
    int getNewPosition() -> getNewPosition
com.google.zxing.oned.rss.expanded.decoders.FieldParser -> com.google.zxing.oned.rss.expanded.decoders.FieldParser:
    java.lang.Object VARIABLE_LENGTH -> VARIABLE_LENGTH
    java.lang.Object[][] TWO_DIGIT_DATA_LENGTH -> TWO_DIGIT_DATA_LENGTH
    java.lang.Object[][] THREE_DIGIT_DATA_LENGTH -> THREE_DIGIT_DATA_LENGTH
    java.lang.Object[][] THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH -> THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH
    java.lang.Object[][] FOUR_DIGIT_DATA_LENGTH -> FOUR_DIGIT_DATA_LENGTH
    void <init>() -> <init>
    java.lang.String parseFieldsInGeneralPurpose(java.lang.String) -> parseFieldsInGeneralPurpose
    java.lang.String processFixedAI(int,int,java.lang.String) -> processFixedAI
    java.lang.String processVariableAI(int,int,java.lang.String) -> processVariableAI
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder -> com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder:
    com.google.zxing.common.BitArray information -> information
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState current -> current
    java.lang.StringBuilder buffer -> buffer
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String decodeAllCodes(java.lang.StringBuilder,int) -> decodeAllCodes
    boolean isStillNumeric(int) -> isStillNumeric
    com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric decodeNumeric(int) -> decodeNumeric
    int extractNumericValueFromBitArray(int,int) -> extractNumericValueFromBitArray
    int extractNumericValueFromBitArray(com.google.zxing.common.BitArray,int,int) -> extractNumericValueFromBitArray
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodeGeneralPurposeField(int,java.lang.String) -> decodeGeneralPurposeField
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation parseBlocks() -> parseBlocks
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseNumericBlock() -> parseNumericBlock
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseIsoIec646Block() -> parseIsoIec646Block
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseAlphaBlock() -> parseAlphaBlock
    boolean isStillIsoIec646(int) -> isStillIsoIec646
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeIsoIec646(int) -> decodeIsoIec646
    boolean isStillAlpha(int) -> isStillAlpha
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeAlphanumeric(int) -> decodeAlphanumeric
    boolean isAlphaTo646ToAlphaLatch(int) -> isAlphaTo646ToAlphaLatch
    boolean isAlphaOr646ToNumericLatch(int) -> isAlphaOr646ToNumericLatch
    boolean isNumericToAlphaNumericLatch(int) -> isNumericToAlphaNumericLatch
com.google.zxing.pdf417.PDF417Reader -> com.google.zxing.pdf417.PDF417Reader:
    com.google.zxing.ResultPoint[] NO_POINTS -> NO_POINTS
    com.google.zxing.pdf417.decoder.Decoder decoder -> decoder
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> extractPureBits
    int moduleSize(int[],com.google.zxing.common.BitMatrix) -> moduleSize
    int findPatternStart(int,int,com.google.zxing.common.BitMatrix) -> findPatternStart
    int findPatternEnd(int,int,com.google.zxing.common.BitMatrix) -> findPatternEnd
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.BitMatrixParser -> com.google.zxing.pdf417.decoder.BitMatrixParser:
    int[] NO_ERRORS -> NO_ERRORS
    int MAX_ROW_DIFFERENCE -> MAX_ROW_DIFFERENCE
    int MAX_ROWS -> MAX_ROWS
    int MAX_CW_CAPACITY -> MAX_CW_CAPACITY
    int MODULES_IN_SYMBOL -> MODULES_IN_SYMBOL
    com.google.zxing.common.BitMatrix bitMatrix -> bitMatrix
    int rows -> rows
    int leftColumnECData -> leftColumnECData
    int rightColumnECData -> rightColumnECData
    int eraseCount -> eraseCount
    int[] erasures -> erasures
    int ecLevel -> ecLevel
    int[] SYMBOL_TABLE -> SYMBOL_TABLE
    int[] CODEWORD_TABLE -> CODEWORD_TABLE
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    int[] readCodewords() -> readCodewords
    int[] trimArray(int[],int) -> trimArray
    int processRow(int[],int,int,int[],int) -> processRow
    int getCodeword(long) -> getCodeword
    int findCodewordIndex(long) -> findCodewordIndex
    int[] getErasures() -> getErasures
    int getECLevel() -> getECLevel
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DecodedBitStreamParser -> com.google.zxing.pdf417.decoder.DecodedBitStreamParser:
    int TEXT_COMPACTION_MODE_LATCH -> TEXT_COMPACTION_MODE_LATCH
    int BYTE_COMPACTION_MODE_LATCH -> BYTE_COMPACTION_MODE_LATCH
    int NUMERIC_COMPACTION_MODE_LATCH -> NUMERIC_COMPACTION_MODE_LATCH
    int BYTE_COMPACTION_MODE_LATCH_6 -> BYTE_COMPACTION_MODE_LATCH_6
    int BEGIN_MACRO_PDF417_CONTROL_BLOCK -> BEGIN_MACRO_PDF417_CONTROL_BLOCK
    int BEGIN_MACRO_PDF417_OPTIONAL_FIELD -> BEGIN_MACRO_PDF417_OPTIONAL_FIELD
    int MACRO_PDF417_TERMINATOR -> MACRO_PDF417_TERMINATOR
    int MODE_SHIFT_TO_BYTE_COMPACTION_MODE -> MODE_SHIFT_TO_BYTE_COMPACTION_MODE
    int MAX_NUMERIC_CODEWORDS -> MAX_NUMERIC_CODEWORDS
    int PL -> PL
    int LL -> LL
    int AS -> AS
    int ML -> ML
    int AL -> AL
    int PS -> PS
    int PAL -> PAL
    char[] PUNCT_CHARS -> PUNCT_CHARS
    char[] MIXED_CHARS -> MIXED_CHARS
    java.math.BigInteger[] EXP900 -> EXP900
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(int[]) -> decode
    int textCompaction(int[],int,java.lang.StringBuilder) -> textCompaction
    void decodeTextCompaction(int[],int[],int,java.lang.StringBuilder) -> decodeTextCompaction
    int byteCompaction(int,int[],int,java.lang.StringBuilder) -> byteCompaction
    int numericCompaction(int[],int,java.lang.StringBuilder) -> numericCompaction
    java.lang.String decodeBase900toBase10(int[],int) -> decodeBase900toBase10
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$1 -> com.google.zxing.pdf417.decoder.DecodedBitStreamParser$1:
    int[] $SwitchMap$com$google$zxing$pdf417$decoder$DecodedBitStreamParser$Mode -> $SwitchMap$com$google$zxing$pdf417$decoder$DecodedBitStreamParser$Mode
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode:
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode ALPHA -> ALPHA
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode LOWER -> LOWER
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode MIXED -> MIXED
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode PUNCT -> PUNCT
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode ALPHA_SHIFT -> ALPHA_SHIFT
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode PUNCT_SHIFT -> PUNCT_SHIFT
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode[] $VALUES -> $VALUES
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode[] values() -> values
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.Decoder -> com.google.zxing.pdf417.decoder.Decoder:
    int MAX_ERRORS -> MAX_ERRORS
    int MAX_EC_CODEWORDS -> MAX_EC_CODEWORDS
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(boolean[][]) -> decode
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> decode
    void verifyCodewordCount(int[],int) -> verifyCodewordCount
    int correctErrors(int[],int[],int) -> correctErrors
com.google.zxing.pdf417.detector.Detector -> com.google.zxing.pdf417.detector.Detector:
    int MAX_AVG_VARIANCE -> MAX_AVG_VARIANCE
    int MAX_INDIVIDUAL_VARIANCE -> MAX_INDIVIDUAL_VARIANCE
    int SKEW_THRESHOLD -> SKEW_THRESHOLD
    int[] START_PATTERN -> START_PATTERN
    int[] START_PATTERN_REVERSE -> START_PATTERN_REVERSE
    int[] STOP_PATTERN -> STOP_PATTERN
    int[] STOP_PATTERN_REVERSE -> STOP_PATTERN_REVERSE
    com.google.zxing.BinaryBitmap image -> image
    void <init>(com.google.zxing.BinaryBitmap) -> <init>
    com.google.zxing.common.DetectorResult detect() -> detect
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> detect
    com.google.zxing.ResultPoint[] findVertices(com.google.zxing.common.BitMatrix) -> findVertices
    com.google.zxing.ResultPoint[] findVertices180(com.google.zxing.common.BitMatrix) -> findVertices180
    void correctCodeWordVertices(com.google.zxing.ResultPoint[],boolean) -> correctCodeWordVertices
    float computeModuleWidth(com.google.zxing.ResultPoint[]) -> computeModuleWidth
    int computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> computeDimension
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> sampleGrid
    int round(float) -> round
    int[] findGuardPattern(com.google.zxing.common.BitMatrix,int,int,int,boolean,int[],int[]) -> findGuardPattern
    int patternMatchVariance(int[],int[],int) -> patternMatchVariance
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.BarcodeMatrix -> com.google.zxing.pdf417.encoder.BarcodeMatrix:
    com.google.zxing.pdf417.encoder.BarcodeRow[] matrix -> matrix
    int currentRow -> currentRow
    int height -> height
    int width -> width
    void <init>(int,int) -> <init>
    void set(int,int,byte) -> set
    void setMatrix(int,int,boolean) -> setMatrix
    void startRow() -> startRow
    com.google.zxing.pdf417.encoder.BarcodeRow getCurrentRow() -> getCurrentRow
    byte[][] getMatrix() -> getMatrix
    byte[][] getScaledMatrix(int) -> getScaledMatrix
    byte[][] getScaledMatrix(int,int) -> getScaledMatrix
com.google.zxing.pdf417.encoder.BarcodeRow -> com.google.zxing.pdf417.encoder.BarcodeRow:
    byte[] row -> row
    int currentLocation -> currentLocation
    void <init>(int) -> <init>
    void set(int,byte) -> set
    void set(int,boolean) -> set
    void addBar(boolean,int) -> addBar
    byte[] getRow() -> getRow
    byte[] getScaledRow(int) -> getScaledRow
com.google.zxing.pdf417.encoder.Compaction -> com.google.zxing.pdf417.encoder.Compaction:
    com.google.zxing.pdf417.encoder.Compaction AUTO -> AUTO
    com.google.zxing.pdf417.encoder.Compaction TEXT -> TEXT
    com.google.zxing.pdf417.encoder.Compaction BYTE -> BYTE
    com.google.zxing.pdf417.encoder.Compaction NUMERIC -> NUMERIC
    com.google.zxing.pdf417.encoder.Compaction[] $VALUES -> $VALUES
    com.google.zxing.pdf417.encoder.Compaction[] values() -> values
    com.google.zxing.pdf417.encoder.Compaction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417 -> com.google.zxing.pdf417.encoder.PDF417:
    int START_PATTERN -> START_PATTERN
    int STOP_PATTERN -> STOP_PATTERN
    int[][] CODEWORD_TABLE -> CODEWORD_TABLE
    float PREFERRED_RATIO -> PREFERRED_RATIO
    float DEFAULT_MODULE_WIDTH -> DEFAULT_MODULE_WIDTH
    float HEIGHT -> HEIGHT
    com.google.zxing.pdf417.encoder.BarcodeMatrix barcodeMatrix -> barcodeMatrix
    boolean compact -> compact
    com.google.zxing.pdf417.encoder.Compaction compaction -> compaction
    int minCols -> minCols
    int maxCols -> maxCols
    int maxRows -> maxRows
    int minRows -> minRows
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    com.google.zxing.pdf417.encoder.BarcodeMatrix getBarcodeMatrix() -> getBarcodeMatrix
    int getNumberOfRows(int,int,int) -> getNumberOfRows
    int calculateNumberOfRows(int,int,int) -> calculateNumberOfRows
    int getNumberOfPadCodewords(int,int,int,int) -> getNumberOfPadCodewords
    int getNumberOfDataCodewords(int,int,int) -> getNumberOfDataCodewords
    void encodeChar(int,int,com.google.zxing.pdf417.encoder.BarcodeRow) -> encodeChar
    void encodeLowLevel(java.lang.CharSequence,int,int,int,com.google.zxing.pdf417.encoder.BarcodeMatrix) -> encodeLowLevel
    void generateBarcodeLogic(java.lang.String,int) -> generateBarcodeLogic
    int[] determineDimensions(int,int) -> determineDimensions
    void setDimensions(int,int,int,int) -> setDimensions
    void setCompaction(com.google.zxing.pdf417.encoder.Compaction) -> setCompaction
    void setCompact(boolean) -> setCompact
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417ErrorCorrection -> com.google.zxing.pdf417.encoder.PDF417ErrorCorrection:
    int[][] EC_COEFFICIENTS -> EC_COEFFICIENTS
    void <init>() -> <init>
    int getErrorCorrectionCodewordCount(int) -> getErrorCorrectionCodewordCount
    int getRecommendedMinimumErrorCorrectionLevel(int) -> getRecommendedMinimumErrorCorrectionLevel
    java.lang.String generateErrorCorrection(java.lang.CharSequence,int) -> generateErrorCorrection
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder -> com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder:
    int TEXT_COMPACTION -> TEXT_COMPACTION
    int BYTE_COMPACTION -> BYTE_COMPACTION
    int NUMERIC_COMPACTION -> NUMERIC_COMPACTION
    int SUBMODE_ALPHA -> SUBMODE_ALPHA
    int SUBMODE_LOWER -> SUBMODE_LOWER
    int SUBMODE_MIXED -> SUBMODE_MIXED
    int SUBMODE_PUNCTUATION -> SUBMODE_PUNCTUATION
    int LATCH_TO_TEXT -> LATCH_TO_TEXT
    int LATCH_TO_BYTE_PADDED -> LATCH_TO_BYTE_PADDED
    int LATCH_TO_NUMERIC -> LATCH_TO_NUMERIC
    int SHIFT_TO_BYTE -> SHIFT_TO_BYTE
    int LATCH_TO_BYTE -> LATCH_TO_BYTE
    byte[] TEXT_MIXED_RAW -> TEXT_MIXED_RAW
    byte[] TEXT_PUNCTUATION_RAW -> TEXT_PUNCTUATION_RAW
    byte[] MIXED -> MIXED
    byte[] PUNCTUATION -> PUNCTUATION
    void <init>() -> <init>
    byte[] getBytesForMessage(java.lang.String) -> getBytesForMessage
    java.lang.String encodeHighLevel(java.lang.String,com.google.zxing.pdf417.encoder.Compaction) -> encodeHighLevel
    int encodeText(java.lang.CharSequence,int,int,java.lang.StringBuilder,int) -> encodeText
    void encodeBinary(byte[],int,int,int,java.lang.StringBuilder) -> encodeBinary
    void encodeNumeric(java.lang.String,int,int,java.lang.StringBuilder) -> encodeNumeric
    boolean isDigit(char) -> isDigit
    boolean isAlphaUpper(char) -> isAlphaUpper
    boolean isAlphaLower(char) -> isAlphaLower
    boolean isMixed(char) -> isMixed
    boolean isPunctuation(char) -> isPunctuation
    boolean isText(char) -> isText
    int determineConsecutiveDigitCount(java.lang.CharSequence,int) -> determineConsecutiveDigitCount
    int determineConsecutiveTextCount(java.lang.CharSequence,int) -> determineConsecutiveTextCount
    int determineConsecutiveBinaryCount(java.lang.CharSequence,byte[],int) -> determineConsecutiveBinaryCount
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417Writer -> com.google.zxing.pdf417.encoder.PDF417Writer:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,boolean,int,int,int,int,int,int,com.google.zxing.pdf417.encoder.Compaction) -> encode
    com.google.zxing.pdf417.encoder.PDF417 initializeEncoder(com.google.zxing.BarcodeFormat,boolean) -> initializeEncoder
    com.google.zxing.common.BitMatrix bitMatrixFromEncoder(com.google.zxing.pdf417.encoder.PDF417,java.lang.String,int,int) -> bitMatrixFromEncoder
    com.google.zxing.common.BitMatrix bitMatrixFrombitArray(byte[][]) -> bitMatrixFrombitArray
    byte[][] rotateArray(byte[][]) -> rotateArray
com.google.zxing.qrcode.QRCodeReader -> com.google.zxing.qrcode.QRCodeReader:
    com.google.zxing.ResultPoint[] NO_POINTS -> NO_POINTS
    com.google.zxing.qrcode.decoder.Decoder decoder -> decoder
    void <init>() -> <init>
    com.google.zxing.qrcode.decoder.Decoder getDecoder() -> getDecoder
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> extractPureBits
    float moduleSize(int[],com.google.zxing.common.BitMatrix) -> moduleSize
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.QRCodeWriter -> com.google.zxing.qrcode.QRCodeWriter:
    int QUIET_ZONE_SIZE -> QUIET_ZONE_SIZE
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    com.google.zxing.common.BitMatrix renderResult(com.google.zxing.qrcode.encoder.QRCode,int,int) -> renderResult
com.google.zxing.qrcode.decoder.BitMatrixParser -> com.google.zxing.qrcode.decoder.BitMatrixParser:
    com.google.zxing.common.BitMatrix bitMatrix -> bitMatrix
    com.google.zxing.qrcode.decoder.Version parsedVersion -> parsedVersion
    com.google.zxing.qrcode.decoder.FormatInformation parsedFormatInfo -> parsedFormatInfo
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.qrcode.decoder.FormatInformation readFormatInformation() -> readFormatInformation
    com.google.zxing.qrcode.decoder.Version readVersion() -> readVersion
    int copyBit(int,int,int) -> copyBit
    byte[] readCodewords() -> readCodewords
com.google.zxing.qrcode.decoder.DataBlock -> com.google.zxing.qrcode.decoder.DataBlock:
    int numDataCodewords -> numDataCodewords
    byte[] codewords -> codewords
    void <init>(int,byte[]) -> <init>
    com.google.zxing.qrcode.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> getDataBlocks
    int getNumDataCodewords() -> getNumDataCodewords
    byte[] getCodewords() -> getCodewords
com.google.zxing.qrcode.decoder.DataMask -> com.google.zxing.qrcode.decoder.DataMask:
    com.google.zxing.qrcode.decoder.DataMask[] DATA_MASKS -> DATA_MASKS
    void <init>() -> <init>
    void unmaskBitMatrix(com.google.zxing.common.BitMatrix,int) -> unmaskBitMatrix
    boolean isMasked(int,int) -> isMasked
    com.google.zxing.qrcode.decoder.DataMask forReference(int) -> forReference
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.DataMask$1 -> com.google.zxing.qrcode.decoder.DataMask$1:
com.google.zxing.qrcode.decoder.DataMask$DataMask000 -> com.google.zxing.qrcode.decoder.DataMask$DataMask000:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask001 -> com.google.zxing.qrcode.decoder.DataMask$DataMask001:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask010 -> com.google.zxing.qrcode.decoder.DataMask$DataMask010:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask011 -> com.google.zxing.qrcode.decoder.DataMask$DataMask011:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask100 -> com.google.zxing.qrcode.decoder.DataMask$DataMask100:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask101 -> com.google.zxing.qrcode.decoder.DataMask$DataMask101:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask110 -> com.google.zxing.qrcode.decoder.DataMask$DataMask110:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DataMask$DataMask111 -> com.google.zxing.qrcode.decoder.DataMask$DataMask111:
    void <init>() -> <init>
    boolean isMasked(int,int) -> isMasked
    void <init>(com.google.zxing.qrcode.decoder.DataMask$1) -> <init>
com.google.zxing.qrcode.decoder.DecodedBitStreamParser -> com.google.zxing.qrcode.decoder.DecodedBitStreamParser:
    char[] ALPHANUMERIC_CHARS -> ALPHANUMERIC_CHARS
    int GB2312_SUBSET -> GB2312_SUBSET
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> decode
    void decodeHanziSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeHanziSegment
    void decodeKanjiSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeKanjiSegment
    void decodeByteSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,com.google.zxing.common.CharacterSetECI,java.util.Collection,java.util.Map) -> decodeByteSegment
    char toAlphaNumericChar(int) -> toAlphaNumericChar
    void decodeAlphanumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,boolean) -> decodeAlphanumericSegment
    void decodeNumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> decodeNumericSegment
    int parseECIValue(com.google.zxing.common.BitSource) -> parseECIValue
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Decoder -> com.google.zxing.qrcode.decoder.Decoder:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> rsDecoder
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(boolean[][]) -> decode
    com.google.zxing.common.DecoderResult decode(boolean[][],java.util.Map) -> decode
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> decode
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> decode
    void correctErrors(byte[],int) -> correctErrors
com.google.zxing.qrcode.decoder.ErrorCorrectionLevel -> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel:
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel L -> L
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel M -> M
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel Q -> Q
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel H -> H
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] FOR_BITS -> FOR_BITS
    int bits -> bits
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] $VALUES -> $VALUES
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] values() -> values
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getBits() -> getBits
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int) -> forBits
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.FormatInformation -> com.google.zxing.qrcode.decoder.FormatInformation:
    int FORMAT_INFO_MASK_QR -> FORMAT_INFO_MASK_QR
    int[][] FORMAT_INFO_DECODE_LOOKUP -> FORMAT_INFO_DECODE_LOOKUP
    int[] BITS_SET_IN_HALF_BYTE -> BITS_SET_IN_HALF_BYTE
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel errorCorrectionLevel -> errorCorrectionLevel
    byte dataMask -> dataMask
    void <init>(int) -> <init>
    int numBitsDiffering(int,int) -> numBitsDiffering
    com.google.zxing.qrcode.decoder.FormatInformation decodeFormatInformation(int,int) -> decodeFormatInformation
    com.google.zxing.qrcode.decoder.FormatInformation doDecodeFormatInformation(int,int) -> doDecodeFormatInformation
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getErrorCorrectionLevel() -> getErrorCorrectionLevel
    byte getDataMask() -> getDataMask
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Mode -> com.google.zxing.qrcode.decoder.Mode:
    com.google.zxing.qrcode.decoder.Mode TERMINATOR -> TERMINATOR
    com.google.zxing.qrcode.decoder.Mode NUMERIC -> NUMERIC
    com.google.zxing.qrcode.decoder.Mode ALPHANUMERIC -> ALPHANUMERIC
    com.google.zxing.qrcode.decoder.Mode STRUCTURED_APPEND -> STRUCTURED_APPEND
    com.google.zxing.qrcode.decoder.Mode BYTE -> BYTE
    com.google.zxing.qrcode.decoder.Mode ECI -> ECI
    com.google.zxing.qrcode.decoder.Mode KANJI -> KANJI
    com.google.zxing.qrcode.decoder.Mode FNC1_FIRST_POSITION -> FNC1_FIRST_POSITION
    com.google.zxing.qrcode.decoder.Mode FNC1_SECOND_POSITION -> FNC1_SECOND_POSITION
    com.google.zxing.qrcode.decoder.Mode HANZI -> HANZI
    int[] characterCountBitsForVersions -> characterCountBitsForVersions
    int bits -> bits
    com.google.zxing.qrcode.decoder.Mode[] $VALUES -> $VALUES
    com.google.zxing.qrcode.decoder.Mode[] values() -> values
    com.google.zxing.qrcode.decoder.Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int[],int) -> <init>
    com.google.zxing.qrcode.decoder.Mode forBits(int) -> forBits
    int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version) -> getCharacterCountBits
    int getBits() -> getBits
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Version -> com.google.zxing.qrcode.decoder.Version:
    int[] VERSION_DECODE_INFO -> VERSION_DECODE_INFO
    com.google.zxing.qrcode.decoder.Version[] VERSIONS -> VERSIONS
    int versionNumber -> versionNumber
    int[] alignmentPatternCenters -> alignmentPatternCenters
    com.google.zxing.qrcode.decoder.Version$ECBlocks[] ecBlocks -> ecBlocks
    int totalCodewords -> totalCodewords
    void <init>(int,int[],com.google.zxing.qrcode.decoder.Version$ECBlocks[]) -> <init>
    int getVersionNumber() -> getVersionNumber
    int[] getAlignmentPatternCenters() -> getAlignmentPatternCenters
    int getTotalCodewords() -> getTotalCodewords
    int getDimensionForVersion() -> getDimensionForVersion
    com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> getECBlocksForLevel
    com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int) -> getProvisionalVersionForDimension
    com.google.zxing.qrcode.decoder.Version getVersionForNumber(int) -> getVersionForNumber
    com.google.zxing.qrcode.decoder.Version decodeVersionInformation(int) -> decodeVersionInformation
    com.google.zxing.common.BitMatrix buildFunctionPattern() -> buildFunctionPattern
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Version[] buildVersions() -> buildVersions
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Version$ECB -> com.google.zxing.qrcode.decoder.Version$ECB:
    int count -> count
    int dataCodewords -> dataCodewords
    void <init>(int,int) -> <init>
    int getCount() -> getCount
    int getDataCodewords() -> getDataCodewords
com.google.zxing.qrcode.decoder.Version$ECBlocks -> com.google.zxing.qrcode.decoder.Version$ECBlocks:
    int ecCodewordsPerBlock -> ecCodewordsPerBlock
    com.google.zxing.qrcode.decoder.Version$ECB[] ecBlocks -> ecBlocks
    void <init>(int,com.google.zxing.qrcode.decoder.Version$ECB[]) -> <init>
    int getECCodewordsPerBlock() -> getECCodewordsPerBlock
    int getNumBlocks() -> getNumBlocks
    int getTotalECCodewords() -> getTotalECCodewords
    com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks() -> getECBlocks
com.google.zxing.qrcode.detector.AlignmentPattern -> com.google.zxing.qrcode.detector.AlignmentPattern:
    float estimatedModuleSize -> estimatedModuleSize
    void <init>(float,float,float) -> <init>
    boolean aboutEquals(float,float,float) -> aboutEquals
    com.google.zxing.qrcode.detector.AlignmentPattern combineEstimate(float,float,float) -> combineEstimate
com.google.zxing.qrcode.detector.AlignmentPatternFinder -> com.google.zxing.qrcode.detector.AlignmentPatternFinder:
    com.google.zxing.common.BitMatrix image -> image
    java.util.List possibleCenters -> possibleCenters
    int startX -> startX
    int startY -> startY
    int width -> width
    int height -> height
    float moduleSize -> moduleSize
    int[] crossCheckStateCount -> crossCheckStateCount
    com.google.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(com.google.zxing.common.BitMatrix,int,int,int,int,float,com.google.zxing.ResultPointCallback) -> <init>
    com.google.zxing.qrcode.detector.AlignmentPattern find() -> find
    float centerFromEnd(int[],int) -> centerFromEnd
    boolean foundPatternCross(int[]) -> foundPatternCross
    float crossCheckVertical(int,int,int,int) -> crossCheckVertical
    com.google.zxing.qrcode.detector.AlignmentPattern handlePossibleCenter(int[],int,int) -> handlePossibleCenter
com.google.zxing.qrcode.detector.Detector -> com.google.zxing.qrcode.detector.Detector:
    com.google.zxing.common.BitMatrix image -> image
    com.google.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.common.BitMatrix getImage() -> getImage
    com.google.zxing.ResultPointCallback getResultPointCallback() -> getResultPointCallback
    com.google.zxing.common.DetectorResult detect() -> detect
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> detect
    com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo) -> processFinderPatternInfo
    com.google.zxing.common.PerspectiveTransform createTransform(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> createTransform
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.common.PerspectiveTransform,int) -> sampleGrid
    int computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> computeDimension
    float calculateModuleSize(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> calculateModuleSize
    float calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> calculateModuleSizeOneWay
    float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int) -> sizeOfBlackWhiteBlackRunBothWays
    float sizeOfBlackWhiteBlackRun(int,int,int,int) -> sizeOfBlackWhiteBlackRun
    com.google.zxing.qrcode.detector.AlignmentPattern findAlignmentInRegion(float,int,int,float) -> findAlignmentInRegion
    int round(float) -> round
com.google.zxing.qrcode.detector.FinderPattern -> com.google.zxing.qrcode.detector.FinderPattern:
    float estimatedModuleSize -> estimatedModuleSize
    int count -> count
    void <init>(float,float,float) -> <init>
    void <init>(float,float,float,int) -> <init>
    float getEstimatedModuleSize() -> getEstimatedModuleSize
    int getCount() -> getCount
    void incrementCount() -> incrementCount
    boolean aboutEquals(float,float,float) -> aboutEquals
    com.google.zxing.qrcode.detector.FinderPattern combineEstimate(float,float,float) -> combineEstimate
com.google.zxing.qrcode.detector.FinderPatternFinder -> com.google.zxing.qrcode.detector.FinderPatternFinder:
    int CENTER_QUORUM -> CENTER_QUORUM
    int MIN_SKIP -> MIN_SKIP
    int MAX_MODULES -> MAX_MODULES
    int INTEGER_MATH_SHIFT -> INTEGER_MATH_SHIFT
    com.google.zxing.common.BitMatrix image -> image
    java.util.List possibleCenters -> possibleCenters
    boolean hasSkipped -> hasSkipped
    int[] crossCheckStateCount -> crossCheckStateCount
    com.google.zxing.ResultPointCallback resultPointCallback -> resultPointCallback
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPointCallback) -> <init>
    com.google.zxing.common.BitMatrix getImage() -> getImage
    java.util.List getPossibleCenters() -> getPossibleCenters
    com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map) -> find
    float centerFromEnd(int[],int) -> centerFromEnd
    boolean foundPatternCross(int[]) -> foundPatternCross
    int[] getCrossCheckStateCount() -> getCrossCheckStateCount
    float crossCheckVertical(int,int,int,int) -> crossCheckVertical
    float crossCheckHorizontal(int,int,int,int) -> crossCheckHorizontal
    boolean handlePossibleCenter(int[],int,int) -> handlePossibleCenter
    int findRowSkip() -> findRowSkip
    boolean haveMultiplyConfirmedCenters() -> haveMultiplyConfirmedCenters
    com.google.zxing.qrcode.detector.FinderPattern[] selectBestPatterns() -> selectBestPatterns
com.google.zxing.qrcode.detector.FinderPatternFinder$1 -> com.google.zxing.qrcode.detector.FinderPatternFinder$1:
com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator -> com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator:
    float average -> average
    void <init>(float) -> <init>
    int compare(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(float,com.google.zxing.qrcode.detector.FinderPatternFinder$1) -> <init>
com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator -> com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator:
    float average -> average
    void <init>(float) -> <init>
    int compare(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(float,com.google.zxing.qrcode.detector.FinderPatternFinder$1) -> <init>
com.google.zxing.qrcode.detector.FinderPatternInfo -> com.google.zxing.qrcode.detector.FinderPatternInfo:
    com.google.zxing.qrcode.detector.FinderPattern bottomLeft -> bottomLeft
    com.google.zxing.qrcode.detector.FinderPattern topLeft -> topLeft
    com.google.zxing.qrcode.detector.FinderPattern topRight -> topRight
    void <init>(com.google.zxing.qrcode.detector.FinderPattern[]) -> <init>
    com.google.zxing.qrcode.detector.FinderPattern getBottomLeft() -> getBottomLeft
    com.google.zxing.qrcode.detector.FinderPattern getTopLeft() -> getTopLeft
    com.google.zxing.qrcode.detector.FinderPattern getTopRight() -> getTopRight
com.google.zxing.qrcode.encoder.BlockPair -> com.google.zxing.qrcode.encoder.BlockPair:
    byte[] dataBytes -> dataBytes
    byte[] errorCorrectionBytes -> errorCorrectionBytes
    void <init>(byte[],byte[]) -> <init>
    byte[] getDataBytes() -> getDataBytes
    byte[] getErrorCorrectionBytes() -> getErrorCorrectionBytes
com.google.zxing.qrcode.encoder.ByteMatrix -> com.google.zxing.qrcode.encoder.ByteMatrix:
    byte[][] bytes -> bytes
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    byte get(int,int) -> get
    byte[][] getArray() -> getArray
    void set(int,int,byte) -> set
    void set(int,int,int) -> set
    void set(int,int,boolean) -> set
    void clear(byte) -> clear
    java.lang.String toString() -> toString
com.google.zxing.qrcode.encoder.Encoder -> com.google.zxing.qrcode.encoder.Encoder:
    int[] ALPHANUMERIC_TABLE -> ALPHANUMERIC_TABLE
    java.lang.String DEFAULT_BYTE_MODE_ENCODING -> DEFAULT_BYTE_MODE_ENCODING
    void <init>() -> <init>
    int calculateMaskPenalty(com.google.zxing.qrcode.encoder.ByteMatrix) -> calculateMaskPenalty
    void encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.encoder.QRCode) -> encode
    void encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map,com.google.zxing.qrcode.encoder.QRCode) -> encode
    int getAlphanumericCode(int) -> getAlphanumericCode
    com.google.zxing.qrcode.decoder.Mode chooseMode(java.lang.String) -> chooseMode
    com.google.zxing.qrcode.decoder.Mode chooseMode(java.lang.String,java.lang.String) -> chooseMode
    boolean isOnlyDoubleByteKanji(java.lang.String) -> isOnlyDoubleByteKanji
    int chooseMaskPattern(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> chooseMaskPattern
    void initQRCode(int,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.QRCode) -> initQRCode
    int getTotalInputBytes(int,com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.Mode) -> getTotalInputBytes
    void terminateBits(int,com.google.zxing.common.BitArray) -> terminateBits
    void getNumDataBytesAndNumECBytesForBlockID(int,int,int,int,int[],int[]) -> getNumDataBytesAndNumECBytesForBlockID
    void interleaveWithECBytes(com.google.zxing.common.BitArray,int,int,int,com.google.zxing.common.BitArray) -> interleaveWithECBytes
    byte[] generateECBytes(byte[],int) -> generateECBytes
    void appendModeInfo(com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray) -> appendModeInfo
    void appendLengthInfo(int,int,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray) -> appendLengthInfo
    void appendBytes(java.lang.String,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray,java.lang.String) -> appendBytes
    void appendNumericBytes(java.lang.CharSequence,com.google.zxing.common.BitArray) -> appendNumericBytes
    void appendAlphanumericBytes(java.lang.CharSequence,com.google.zxing.common.BitArray) -> appendAlphanumericBytes
    void append8BitBytes(java.lang.String,com.google.zxing.common.BitArray,java.lang.String) -> append8BitBytes
    void appendKanjiBytes(java.lang.String,com.google.zxing.common.BitArray) -> appendKanjiBytes
    void appendECI(com.google.zxing.common.CharacterSetECI,com.google.zxing.common.BitArray) -> appendECI
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.Encoder$1 -> com.google.zxing.qrcode.encoder.Encoder$1:
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> $SwitchMap$com$google$zxing$qrcode$decoder$Mode
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.MaskUtil -> com.google.zxing.qrcode.encoder.MaskUtil:
    void <init>() -> <init>
    int applyMaskPenaltyRule1(com.google.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule1
    int applyMaskPenaltyRule2(com.google.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule2
    int applyMaskPenaltyRule3(com.google.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule3
    int applyMaskPenaltyRule4(com.google.zxing.qrcode.encoder.ByteMatrix) -> applyMaskPenaltyRule4
    boolean getDataMaskBit(int,int,int) -> getDataMaskBit
    int applyMaskPenaltyRule1Internal(com.google.zxing.qrcode.encoder.ByteMatrix,boolean) -> applyMaskPenaltyRule1Internal
com.google.zxing.qrcode.encoder.MatrixUtil -> com.google.zxing.qrcode.encoder.MatrixUtil:
    int[][] POSITION_DETECTION_PATTERN -> POSITION_DETECTION_PATTERN
    int[][] HORIZONTAL_SEPARATION_PATTERN -> HORIZONTAL_SEPARATION_PATTERN
    int[][] VERTICAL_SEPARATION_PATTERN -> VERTICAL_SEPARATION_PATTERN
    int[][] POSITION_ADJUSTMENT_PATTERN -> POSITION_ADJUSTMENT_PATTERN
    int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE -> POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE
    int[][] TYPE_INFO_COORDINATES -> TYPE_INFO_COORDINATES
    int VERSION_INFO_POLY -> VERSION_INFO_POLY
    int TYPE_INFO_POLY -> TYPE_INFO_POLY
    int TYPE_INFO_MASK_PATTERN -> TYPE_INFO_MASK_PATTERN
    void <init>() -> <init>
    void clearMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> clearMatrix
    void buildMatrix(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> buildMatrix
    void embedBasicPatterns(int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedBasicPatterns
    void embedTypeInfo(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedTypeInfo
    void maybeEmbedVersionInfo(int,com.google.zxing.qrcode.encoder.ByteMatrix) -> maybeEmbedVersionInfo
    void embedDataBits(com.google.zxing.common.BitArray,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedDataBits
    int findMSBSet(int) -> findMSBSet
    int calculateBCHCode(int,int) -> calculateBCHCode
    void makeTypeInfoBits(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.common.BitArray) -> makeTypeInfoBits
    void makeVersionInfoBits(int,com.google.zxing.common.BitArray) -> makeVersionInfoBits
    boolean isEmpty(int) -> isEmpty
    boolean isValidValue(int) -> isValidValue
    void embedTimingPatterns(com.google.zxing.qrcode.encoder.ByteMatrix) -> embedTimingPatterns
    void embedDarkDotAtLeftBottomCorner(com.google.zxing.qrcode.encoder.ByteMatrix) -> embedDarkDotAtLeftBottomCorner
    void embedHorizontalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedHorizontalSeparationPattern
    void embedVerticalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedVerticalSeparationPattern
    void embedPositionAdjustmentPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedPositionAdjustmentPattern
    void embedPositionDetectionPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> embedPositionDetectionPattern
    void embedPositionDetectionPatternsAndSeparators(com.google.zxing.qrcode.encoder.ByteMatrix) -> embedPositionDetectionPatternsAndSeparators
    void maybeEmbedPositionAdjustmentPatterns(int,com.google.zxing.qrcode.encoder.ByteMatrix) -> maybeEmbedPositionAdjustmentPatterns
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.QRCode -> com.google.zxing.qrcode.encoder.QRCode:
    int NUM_MASK_PATTERNS -> NUM_MASK_PATTERNS
    com.google.zxing.qrcode.decoder.Mode mode -> mode
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> ecLevel
    int version -> version
    int matrixWidth -> matrixWidth
    int maskPattern -> maskPattern
    int numTotalBytes -> numTotalBytes
    int numDataBytes -> numDataBytes
    int numECBytes -> numECBytes
    int numRSBlocks -> numRSBlocks
    com.google.zxing.qrcode.encoder.ByteMatrix matrix -> matrix
    void <init>() -> <init>
    com.google.zxing.qrcode.decoder.Mode getMode() -> getMode
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getECLevel() -> getECLevel
    int getVersion() -> getVersion
    int getMatrixWidth() -> getMatrixWidth
    int getMaskPattern() -> getMaskPattern
    int getNumTotalBytes() -> getNumTotalBytes
    int getNumDataBytes() -> getNumDataBytes
    int getNumECBytes() -> getNumECBytes
    int getNumRSBlocks() -> getNumRSBlocks
    com.google.zxing.qrcode.encoder.ByteMatrix getMatrix() -> getMatrix
    int at(int,int) -> at
    boolean isValid() -> isValid
    java.lang.String toString() -> toString
    void setMode(com.google.zxing.qrcode.decoder.Mode) -> setMode
    void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> setECLevel
    void setVersion(int) -> setVersion
    void setMatrixWidth(int) -> setMatrixWidth
    void setMaskPattern(int) -> setMaskPattern
    void setNumTotalBytes(int) -> setNumTotalBytes
    void setNumDataBytes(int) -> setNumDataBytes
    void setNumECBytes(int) -> setNumECBytes
    void setNumRSBlocks(int) -> setNumRSBlocks
    void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> setMatrix
    boolean isValidMaskPattern(int) -> isValidMaskPattern
